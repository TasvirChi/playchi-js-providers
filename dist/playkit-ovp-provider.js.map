{"version":3,"sources":["./providers/webpack/universalModuleDefinition","./providers/webpack/bootstrap","./providers/./util/error/error.js","./providers/./util/error/severity.js","./providers/./util/error/category.js","./providers/./util/error/code.js","./providers/./util/logger.js","./providers/./entities/media-entry.js","./providers/./util/request-builder.js","./providers/./entities/media-format.js","./providers/./k-provider/common/base-service-result.js","./providers/./k-provider/common/response-types/kaltura-drm-playback-plugin-data.js","./providers/./entities/media-sources.js","./providers/./entities/media-source.js","./providers/./k-provider/common/data-loader-manager.js","./providers/./k-provider/common/multi-request-builder.js","./providers/./k-provider/common/response-types/kaltura-access-control-message.js","./providers/./entities/drm.js","./providers/./k-provider/common/base-provider.js","./providers/./util/clone.js","./providers/./entities/entry-list.js","./providers/./k-provider/ovp/config.js","./providers/./k-provider/ovp/response-types/kaltura-playback-source.js","./providers/./k-provider/ovp/response-types/kaltura-rule-action.js","./providers/./k-provider/ovp/response-types/kaltura-access-control-modify-request-host-regex-action.js","./providers/./k-provider/ovp/response-types/kaltura-flavor-asset.js","./providers/./k-provider/ovp/response-types/kaltura-playback-context.js","./providers/./k-provider/ovp/response-types/kaltura-metadata.js","./providers/./k-provider/ovp/response-types/kaltura-metadata-list-response.js","./providers/./k-provider/ovp/response-types/kaltura-media-entry.js","./providers/./k-provider/ovp/play-source-url-builder.js","./providers/./util/xml-parser.js","./providers/./entities/playlist.js","./providers/./k-provider/ovp/external-captions-builder.js","./providers/./k-provider/ovp/provider-parser.js","./providers/./k-provider/ovp/services/ovp-service.js","./providers/./k-provider/ovp/request-params/base-entry-response-profile.js","./providers/./k-provider/ovp/services/base-entry-service.js","./providers/./k-provider/ovp/services/meta-data-service.js","./providers/./k-provider/ovp/response-types/kaltura-base-entry-list-response.js","./providers/./k-provider/ovp/loaders/media-entry-loader.js","./providers/./k-provider/ovp/services/session-service.js","./providers/./k-provider/ovp/loaders/session-loader.js","./providers/./k-provider/ovp/loaders/data-loader-manager.js","./providers/./k-provider/ovp/services/playlist-service.js","./providers/./k-provider/ovp/response-types/kaltura-playlist.js","./providers/./k-provider/ovp/response-types/kaltura-media-entries.js","./providers/./k-provider/ovp/loaders/playlist-loader.js","./providers/./k-provider/ovp/loaders/entry-list-loader.js","./providers/./k-provider/ovp/provider.js","./providers/./k-provider/ovp/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Error","severity","category","code","data","this","_logger","error","RECOVERABLE","CRITICAL","NETWORK","SERVICE","PROVIDER","UNSUPPORTED_SCHEME","BAD_HTTP_STATUS","HTTP_ERROR","TIMEOUT","MALFORMED_DATA_URI","BAD_SERVER_RESPONSE","MULTIREQUEST_API_ERROR","API_RESPONSE_MISMATCH","ERROR","BLOCK_ACTION","MEDIA_STATUS_NOT_READY","MISSING_MANDATORY_PARAMS","MISSING_PLAY_SOURCE","METHOD_NOT_IMPLEMENTED","getLogger","JsLogger","trace","debug","info","log","warn","time","timeEnd","getLevel","setLevel","LogLevel","setLogger","logger","getLogLevel","setLogLevel","level","MediaEntry","metadata","Map","sources","MediaSources","type","Type","UNKNOWN","id","toJSON","duration","dvrStatus","status","poster","assetReferenceType","VOD","LIVE","IMAGE","AUDIO","RequestBuilder","headers","async","timeout","maxAttempts","serviceUrl","service","action","promise","Promise","resolve","reject","_requestPromise","url","Severity","Category","Code","_createXHR","request","XMLHttpRequest","onreadystatechange","readyState","response","JSON","parse","responseText","responseHeaders","_getResponseHeaders","_createError","text","open","method","retryConfig","requestTime","performance","now","ontimeout","_handleError","statusText","onerror","onabort","forEach","setRequestHeader","send","params","getAllResponseHeaders","split","filter","header","toLowerCase","indexOf","_attemptCounter","assign","attempt","MediaFormat","DASH","mimeType","pathExt","HLS","WVM","MP4","MP3","SupportedStreamFormat","isProgressiveSource","formatName","sourceFormat","ServiceResult","objectType","hasError","ServiceError","message","KalturaDrmPlaybackPluginData","drm","scheme","licenseURL","certificate","WIDEVINE_CENC","PLAYREADY_CENC","FAIRPLAY","progressive","dash","hls","source","mediaFormat","push","h","MediaSource","mimetype","bandwidth","width","height","label","drmData","length","Array","isArray","DataLoaderManager","networkRetryConfig","_networkRetryConfig","loader","execution_loader","isValid","_loaders","set","startIndex","_multiRequest","requests","add","executionLoaderResponseMap","from","val","index","_loadersResponseMap","execute","then","_multiResponse","prepareData","success","err","loaderDataIndexes","results","slice","MultiRequestBuilder","requestParams","serviceDef","stringify","FAILED_PARSING_REQUEST","doHttpRequest","multiRequestResult","MultiRequestResult","result","serviceResult","KalturaAccessControlMessage","Drm","licenseUrl","BaseProvider","options","playerVersion","_partnerId","partnerId","_widgetId","widgetId","_uiConfId","uiConfId","_isAnonymous","ks","_ks","_playerVersion","defaultWidgetId","mediaInfo","playlistInfo","entryListInfo","concat","messages","clone","node","e","keys","EntryList","items","defaultConfig","cdnUrl","serviceParams","apiVersion","format","useApiCaptions","OVPConfiguration","clientConfig","KalturaPlaybackSource","deliveryProfileId","protocols","flavorIds","map","protocol","returnValue","KalturaRuleAction","DRM_POLICY","BLOCK","PREVIEW","LIMIT_FLAVORS","ADD_TO_STORAGE","LIMIT_DELIVERY_PROFILES","SERVE_FROM_REMOTE_SERVER","REQUEST_HOST_REGEX","LIMIT_THUMBNAIL_CAPTURE","KalturaAccessControlModifyRequestHostRegexAction","pattern","replacement","replacmenServerNodeId","KalturaFlavorAsset","flavorParamsId","fileExt","bitrate","frameRate","isOriginal","isWeb","containerFormat","videoCodecId","language","QUEUED","CONVERTING","READY","DELETED","NOT_APPLICABLE","TEMP","WAIT_FOR_CONVERT","IMPORTING","VALIDATING","EXPORTING","KalturaPlaybackContext","actions","flavorAssets","flavor","undefined","getBlockAction","find","KalturaMetadata","metadataProfileId","metadataProfileVersion","metadataObjectType","objectId","version","created","Date","setUTCSeconds","createdAt","updated","updatedAt","xml","AD_CUE_POINT","ANNOTATION","CODE_CUE_POINT","THUMB_CUE_POINT","ENTRY","CATEGORY","USER","PARTNER","DYNAMIC_OBJECT","VALID","INVALID","KalturaMetadataListResponse","responseObj","totalCount","metas","objects","meta","KalturaMediaEntry","entry","referenceId","externalSourceType","description","dataUrl","entryType","mediaType","flavorParamsIds","thumbnailUrl","tags","AUTOMATIC","EXTERNAL_MEDIA","MEDIA_CLIP","MIX","PLAYLIST","DATA","LIVE_STREAM","LIVE_CHANNEL","DOCUMENT","VIDEO","LIVE_STREAM_FLASH","LIVE_STREAM_WINDOWS_MEDIA","LIVE_STREAM_REAL_MEDIA","LIVE_STREAM_QUICK_TIME","ERROR_IMPORTING","ERROR_CONVERTING","SCAN_FAILURE","IMPORT","INFECTED","PRECONVERT","PENDING","MODERATE","BLOCKED","NO_CONTENT","PENDING_MODERATION","APPROVED","REJECTED","FLAGGED_FOR_REVIEW","AUTO_APPROVED","PlaySourceUrlBuilder","urlParams","config","serviceUrlOrigin","substr","lastIndexOf","entryId","extension","playUrl","endsWith","XmlParser","obj","nodeType","attributes","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","xmlToJson","old","Playlist","KalturaCaptionType","SRT","DFXP","WEBVTT","CAP","CaptionsFormatsMap","ExternalCaptionsBuilder","captions","caption","includes","webVttUrl","default","isDefault","languageCode","OVPProviderParser","mediaEntryResponse","mediaEntry","playbackContext","playBackContextResult","metadataList","metadataListResult","kalturaSources","_getParsedSources","playbackCaptions","createConfig","_fillBaseData","playlistResponse","playlist","playlistData","playlistItems","entries","entryList","_parseMetadata","_getEntryType","entryTypeEnum","typeEnum","MediaType","EntryType","progressiveSource","mediaSource","addAdaptiveSource","parsedSource","_parseAdaptiveSource","getProtocol","_getBaseProtocol","_parseProgressiveSources","kalturaSource","hasFlavorIds","build","_applyRegexAction","hasDrmData","drmParams","Scheme","videoSources","audioSources","sourceId","metaXml","domParser","DOMParser","replace","parseFromString","metasObj","exec","document","location","hasBlockAction","getErrorMessages","regexAction","getRequestHostRegexAction","regex","RegExp","match","OVPService","ovpParams","clientTag","multiReq","getUrl","FIELDS","BaseEntryResponseProfile","responseProfile","INCLUDE_FIELDS","fields","EXCLUDE_FIELDS","OVPBaseEntryService","serviceEntryId","tag","contextDataParams","flavorTags","redirectFromEntryId","getEntryListReqParams","idEqual","OVPMetadataService","objectIdEqual","metadataObjectTypeEqual","KalturaBaseEntryListResponse","OVPMediaEntryLoader","buildRequests","_entryId","list","getPlaybackContext","_requests","_response","OVPSessionService","OVPSessionLoader","anonymousSession","OVPDataLoaderManager","getMultiRequest","OVPPlaylistService","playlistId","KalturaPlaylist","KalturaMediaEntries","OVPPlaylistLoader","_playlistId","OVPEntryListLoader","_entries","OVPProvider","env","_setFilterOptionsConfig","filterOptions","networkRetryParameters","_dataLoader","_getEntryRedirectFilter","fetchData","_parseDataFromResponse","_filterOptionsConfig","mediaConfig","session","isAnonymous","_getDefaultSourcesObject","plugins","has","sessionLoader","mediaLoader","getMediaEntry","_getSourcesObject","_verifyMediaStatus","_verifyHasSources","EntryStatus","_parsePlaylistDataFromResponse","playlistConfig","_getPlaylistObject","playlistLoader","getPlaylist","_parseEntryListDataFromResponse","getEntryList","dvr","vr","sourcesObject","mediaSources","NAME","__NAME__","VERSION","__VERSION__"],"mappings":"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","file":"playkit-ovp-provider.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ovp\"] = factory();\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"providers\"] = root[\"playkit\"][\"providers\"] || {}, root[\"playkit\"][\"providers\"][\"ovp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","//@flow\nimport getLogger from '../logger';\nimport {Severity} from './severity';\nimport type {SeverityType} from './severity';\nimport {Code} from './code';\nimport type {CodeType} from './code';\nimport {Category} from './category';\nimport type {CategoryType} from './category';\n\nconst CLASS_NAME: string = 'Error';\n\n/**\n * @classdesc This is a description of the error class.\n */\nexport default class Error {\n  severity: number;\n  category: number;\n  code: number;\n  data: any;\n  /**\n   * @enum {number}\n   */\n  static Severity: SeverityType = Severity;\n  /**\n   * @enum {number}\n   */\n  static Category: CategoryType = Category;\n  /**\n   * @enum {number}\n   */\n  static Code: CodeType = Code;\n  static _logger: any = getLogger(CLASS_NAME);\n\n  /**\n   * @constructor\n   * @param {number} severity - error's severity\n   * @param {number} category - error's category.\n   * @param {number} code - error's code.\n   * @param {any} data - additional data for the error.\n   */\n  constructor(severity: number, category: number, code: number, data: any = {}) {\n    this.severity = severity;\n    this.category = category;\n    this.code = code;\n    this.data = data;\n    Error._logger.error(`Category:${category} | Code:${code} |`, data);\n  }\n}\n","//@flow\n\ntype SeverityType = {[severity: string]: number};\n\nconst Severity: SeverityType = {\n  /**\n   * An error occurred, but the Player is attempting to recover from the error.\n   *\n   * If the Player cannot ultimately recover, it still may not throw a CRITICAL\n   * error.  For example, retrying for a media segment will never result in\n   * a CRITICAL error (the Player will just retry forever).\n   */\n  RECOVERABLE: 1,\n  /**\n   * A critical error that the library cannot recover from.  These usually cause\n   * the Player to stop loading or updating.  A new manifest must be loaded\n   * to reset the library.\n   */\n  CRITICAL: 2\n};\n\nexport {Severity};\nexport type {SeverityType};\n","//@flow\ntype CategoryType = {[category: string]: number};\n\nconst Category: CategoryType = {\n  /** Errors from the network stack. */\n  NETWORK: 1,\n  SERVICE: 2,\n  PROVIDER: 3\n};\n\nexport {Category};\nexport type {CategoryType};\n","//@flow\n\ntype CodeType = {[code: string]: number};\n\nconst Code: CodeType = {\n  /**\n   * A network request was made using an unsupported URI scheme.\n   */\n  UNSUPPORTED_SCHEME: 1000,\n\n  /**\n   * An HTTP network request returned an HTTP status that indicated a failure.\n   */\n  BAD_HTTP_STATUS: 1001,\n\n  /**\n   * An HTTP network request failed with an error, but not from the server.\n   */\n  HTTP_ERROR: 1002,\n\n  /**\n   * A network request timed out.\n   */\n  TIMEOUT: 1003,\n\n  /**\n   * A network request was made with a malformed data URI.\n   */\n  MALFORMED_DATA_URI: 1004,\n\n  /**\n   * The server responsded with 2xx response, but it couldn't be parsed\n   */\n  BAD_SERVER_RESPONSE: 1005,\n\n  /**\n   * The server response had a valid structure but contained an error from the API\n   */\n  MULTIREQUEST_API_ERROR: 1006,\n\n  /**\n   * The server response had a valid structure and valid API result, but it did not match the request\n   */\n  API_RESPONSE_MISMATCH: 1007,\n\n  /**\n   * The server responded with an error\n   */\n  ERROR: 2000,\n\n  /**\n   * The server responded with a block action\n   */\n  BLOCK_ACTION: 2001,\n\n  /**\n   * The server responded with status import or pre convert\n   */\n  MEDIA_STATUS_NOT_READY: 2002,\n\n  /**\n   * The provider is missing mandatory parameter/s\n   */\n\n  MISSING_MANDATORY_PARAMS: 3000,\n\n  /**\n   * The server responded with empty sources objects (for HLS, Dash and progressive)\n   */\n  MISSING_PLAY_SOURCE: 3001,\n\n  /**\n   * The provider doesn't implement the called api\n   */\n  METHOD_NOT_IMPLEMENTED: 3002\n};\n\nexport {Code};\nexport type {CodeType};\n","//@flow\nexport type LogLevelObject = {value: number, name: string};\nexport type LogLevelType = {[level: string]: LogLevelObject};\nexport type loggerFunctionType = {\n  trace: Function,\n  debug: Function,\n  info: Function,\n  log: Function,\n  warn: Function,\n  error: Function,\n  time: Function,\n  timeEnd: Function,\n  getLevel: Function,\n  setLevel: Function\n};\n\nexport type LoggerType = {\n  getLogger: loggerFunctionType,\n  LogLevel: LogLevelType\n};\n\nlet JsLogger = {\n  get: () => ({\n    trace: () => {},\n    debug: () => {},\n    info: () => {},\n    log: () => {},\n    warn: () => {},\n    error: () => {},\n    time: () => {},\n    timeEnd: () => {},\n    getLevel: () => {},\n    setLevel: () => {}\n  })\n};\n\nlet LogLevel: LogLevelType = {};\n/**\n * set logger\n * @param {LoggerType} logger - the logger\n * @returns {void}\n */\nfunction setLogger(logger: ?LoggerType): void {\n  if (logger && typeof logger.getLogger === 'function') {\n    JsLogger.get = logger.getLogger;\n  }\n  if (logger && logger.LogLevel) {\n    LogLevel = logger.LogLevel;\n  }\n}\n\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name?: string): Object {\n  //$FlowFixMe\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name?: string): LogLevelObject {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level: LogLevelObject, name?: string): void {\n  getLogger(name).setLevel(level);\n}\n\nexport default getLogger;\nexport {getLogLevel, setLogLevel, setLogger, LogLevel};\n","//@flow\nimport MediaSources from './media-sources';\n\nexport default class MediaEntry {\n  static Type: {[type: string]: string} = {\n    VOD: 'Vod',\n    LIVE: 'Live',\n    IMAGE: 'Image',\n    AUDIO: 'Audio',\n    UNKNOWN: 'Unknown'\n  };\n\n  /**\n   * @member - entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - entry name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - entry sources\n   * @type {MediaSources}\n   */\n  sources: MediaSources;\n  /**\n   * @member - entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - entry type\n   * @type {string}\n   */\n  type: string;\n  /**\n   * @member - entry metadata\n   * @type {Object}\n   */\n  metadata: Object;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - media status\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - media poster\n   * @type {string | Array<Object>}\n   */\n  poster: string | Array<Object>;\n\n  /**\n   * @member - assetReferenceType\n   * @type {string }\n   */\n  assetReferenceType: string;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.metadata = new Map();\n    this.sources = new MediaSources();\n    this.type = MediaEntry.Type.UNKNOWN;\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaEntryObject} - The json class object.\n   */\n  toJSON(): ProviderMediaEntryObject {\n    return {\n      id: this.id,\n      name: this.name,\n      sources: this.sources.toJSON(),\n      duration: this.duration,\n      dvrStatus: this.dvrStatus,\n      status: this.status,\n      metadata: this.metadata,\n      type: this.type,\n      poster: this.poster,\n      assetReferenceType: this.assetReferenceType\n    };\n  }\n}\n","//@flow\nimport Error from './error/error';\n\nconst KALTURA_HEADER_PREFIX: string = 'x-';\n\nexport default class RequestBuilder {\n  /**\n   * @member - Service name\n   * @type {string}\n   */\n  service: string;\n  /**\n   * @member - Service action\n   * @type {string}\n   */\n  action: string;\n  /**\n   * @member - Service params\n   * @type {any}\n   */\n  params: any;\n  /**\n   * @memberof - Service headers\n   * @type {Map<string, string>}\n   */\n  headers: Map<string, string>;\n  /**\n   * @memberof - Service URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @memberof - Service method (POST,GET,DELETE etc..)\n   * @type {string}\n   */\n  method: string;\n  /**\n   * @memberof - Service tag\n   * @type {string}\n   */\n  tag: string;\n  /**\n   * @memberof - the response headers of the arra\n   * @type {Array<string>}\n   */\n  responseHeaders: Array<string>;\n  /**\n   * @description network retry configuration\n   * @memberof RequestBuilder\n   * @type {ProviderNetworkRetryParameters}\n   */\n  retryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  /**\n   * @description number of xhr attempts for the same multi - request.\n   * @memberof RequestBuilder\n   * @type {number}\n   * @private\n   */\n  _attemptCounter: number = 1;\n\n  /**\n   * @description hold the promise result of the XHR request(s) - if all tries fails, it rejects with the error.\n   * @memberof RequestBuilder\n   * @type {Object}\n   * @private\n   */\n  _requestPromise: Object;\n\n  /**\n   * @constructor\n   * @param {Map<string, string>} headers The request headers\n   */\n  constructor(headers: Map<string, string> = new Map()) {\n    this.headers = headers;\n  }\n\n  /**\n   * Builds restful service URL\n   * @function getUrl\n   * @param {string} serviceUrl - The service base URL\n   * @returns {string} The service URL\n   */\n  getUrl(serviceUrl: string): string {\n    return serviceUrl + '/service/' + this.service + (this.action ? '/action/' + this.action : '');\n  }\n\n  /**\n   * Executes service\n   * @function doHttpRequest\n   * @returns {Promise.<any>} Service response as promise\n   */\n  doHttpRequest(): Promise<any> {\n    const promise = new Promise((resolve, reject) => {\n      this._requestPromise = {\n        resolve,\n        reject\n      };\n    });\n    if (!this.url) {\n      this._requestPromise.reject(\n        new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MALFORMED_DATA_URI, {\n          url: this.url\n        })\n      );\n    }\n    this._createXHR();\n    return promise;\n  }\n\n  _createXHR(): void {\n    let request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          try {\n            const response = JSON.parse(request.responseText);\n            this.responseHeaders = this._getResponseHeaders(request);\n            // the promise returns the response for backwards compatibility\n            return this._requestPromise.resolve(response);\n          } catch (error) {\n            this._requestPromise.reject(\n              this._createError(request, Error.Code.BAD_SERVER_RESPONSE, {\n                text: request.responseText\n              })\n            );\n          }\n        }\n      }\n    };\n    request.open(this.method, this.url, this.retryConfig.async);\n    if (this.retryConfig.async && this.retryConfig.timeout) {\n      request.timeout = this.retryConfig.timeout;\n    }\n    const requestTime = performance.now();\n    request.ontimeout = () => {\n      this._handleError(request, Error.Code.TIMEOUT, {\n        timeout: (performance.now() - requestTime) / 1000,\n        statusText: request.statusText\n      });\n    };\n    request.onerror = request.onabort = () => {\n      this._handleError(request, Error.Code.HTTP_ERROR, {\n        text: request.responseText,\n        statusText: request.statusText\n      });\n    };\n    this.headers.forEach((value, key) => {\n      request.setRequestHeader(key, value);\n    });\n    request.send(this.params);\n  }\n\n  _getResponseHeaders(request: XMLHttpRequest): Array<string> {\n    return request\n      .getAllResponseHeaders()\n      .split('\\n')\n      .filter(header => header.toLowerCase().indexOf(KALTURA_HEADER_PREFIX) === 0);\n  }\n\n  _handleError(request: XMLHttpRequest, code: number, data: Object): Promise<*> | void {\n    const error = this._createError(request, code, data);\n    request.onreadystatechange = function () {};\n    request.onerror = function () {};\n    request.ontimeout = function () {};\n    request.onabort = function () {};\n    if (this.retryConfig.maxAttempts && this._attemptCounter < this.retryConfig.maxAttempts) {\n      this._attemptCounter++;\n      this._createXHR();\n    } else {\n      return this._requestPromise.reject(error);\n    }\n  }\n\n  _createError(request: XMLHttpRequest, code: number, data: Object): Error {\n    Object.assign(data, {\n      url: this.url,\n      headers: this._getResponseHeaders(request),\n      attempt: this._attemptCounter\n    });\n    return new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, code, data);\n  }\n}\n","//@flow\nexport const MediaFormat: {[name: string]: ProviderMediaFormatType} = {\n  DASH: {\n    name: 'dash',\n    mimeType: 'application/dash+xml',\n    pathExt: 'mpd'\n  },\n  HLS: {\n    name: 'hls',\n    mimeType: 'application/x-mpegURL',\n    pathExt: 'm3u8'\n  },\n  WVM: {\n    name: 'wvm',\n    mimeType: 'video/wvm',\n    pathExt: 'wvm'\n  },\n  MP4: {\n    name: 'mp4',\n    mimeType: 'video/mp4',\n    pathExt: 'mp4'\n  },\n  MP3: {\n    name: 'mp3',\n    mimeType: 'audio/mpeg',\n    pathExt: 'mp3'\n  }\n};\n\nexport const SupportedStreamFormat: Map<string, ProviderMediaFormatType> = new Map([\n  ['mpegdash', MediaFormat.DASH],\n  ['applehttp', MediaFormat.HLS],\n  ['url', MediaFormat.MP4]\n]);\n\n/**\n * returns a boolean whether a source is progressive or not\n * @param {string} formatName - the format name\n * @returns {boolean} - if source is progressive or not\n */\nfunction isProgressiveSource(formatName: string): boolean {\n  const sourceFormat = SupportedStreamFormat.get(formatName);\n  return !!sourceFormat && sourceFormat.name === MediaFormat.MP4.name;\n}\n\nexport {isProgressiveSource};\n","//@flow\nexport default class ServiceResult {\n  /**\n   * @member - Is service returned an error\n   * @type {boolean}\n   */\n  hasError: boolean = false;\n  /**\n   * @member - The service error\n   * @type {ServiceError}\n   */\n  error: ServiceError;\n  /**\n   * @member - The service result data\n   * @type {Object}\n   */\n  data: Object;\n\n  /**\n   * @constructor\n   * @param {Object} response - Service response\n   */\n  constructor(response: Object) {\n    if (response.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.code, response.message);\n    } else if (response.error && response.error.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.error.code, response.error.message);\n    } else {\n      this.data = response;\n    }\n  }\n}\n\nclass ServiceError {\n  /**\n   * @member - The error code\n   * @type {string}\n   */\n  code: string;\n  /**\n   * @member - The error message\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * @constructor\n   * @param {string} code - The result code\n   * @param {string} message - The result message\n   */\n  constructor(code: string, message: string) {\n    this.code = code;\n    this.message = message;\n  }\n}\n","//@flow\nexport default class KalturaDrmPlaybackPluginData {\n  static Scheme: {[scheme: string]: string} = {\n    'drm.PLAYREADY_CENC': 'com.microsoft.playready',\n    'drm.WIDEVINE_CENC': 'com.widevine.alpha',\n    'fairplay.FAIRPLAY': 'com.apple.fairplay',\n    WIDEVINE_CENC: 'com.widevine.alpha',\n    PLAYREADY_CENC: 'com.microsoft.playready',\n    FAIRPLAY: 'com.apple.fairplay'\n  };\n\n  /**\n   * @member - The drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - The license URL\n   * @type {string}\n   */\n  licenseURL: string;\n\n  /**\n   * @member - The drm certificate\n   * @type {?string}\n   */\n  certificate: ?string;\n\n  /**\n   * @constructor\n   * @param {Object} drm The json response\n   */\n  constructor(drm: any) {\n    this.scheme = drm.scheme;\n    this.licenseURL = drm.licenseURL;\n    this.certificate = drm.certificate;\n  }\n}\n","// @flow\nimport MediaSource from './media-source';\nimport {MediaFormat} from './media-format';\n\nexport default class MediaSources {\n  /**\n   * Progressive download media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  progressive: Array<MediaSource>;\n  /**\n   * Dash media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  dash: Array<MediaSource>;\n  /**\n   * Hls media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  hls: Array<MediaSource>;\n  captions: Array<PKExternalCaptionObject>;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.progressive = [];\n    this.dash = [];\n    this.hls = [];\n  }\n\n  /**\n   * Maps the source to one of the containers according to his media format.\n   * @param {MediaSource} source - The source to add to one of the containers.\n   * @param {MediaFormat} mediaFormat - The media format of the source.\n   * @returns {void}\n   */\n  map(source: MediaSource, mediaFormat: ?ProviderMediaFormatType) {\n    if (mediaFormat) {\n      switch (mediaFormat.name) {\n        case MediaFormat.MP4.name:\n          this.progressive.push(source);\n          break;\n        case MediaFormat.DASH.name:\n          this.dash.push(source);\n          break;\n        case MediaFormat.HLS.name:\n          this.hls.push(source);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourcesObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourcesObject {\n    const response: ProviderMediaSourcesObject = {\n      progressive: [],\n      dash: [],\n      hls: []\n    };\n    this.progressive.forEach(p => response.progressive.push(p.toJSON()));\n    this.hls.forEach(h => response.hls.push(h.toJSON()));\n    this.dash.forEach(d => response.dash.push(d.toJSON()));\n    return response;\n  }\n}\n","//@flow\nimport Drm from './drm';\n\nexport default class MediaSource {\n  /**\n   * @member - media source id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - media source url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - media source mimetype\n   * @type {string}\n   */\n  mimetype: string;\n  /**\n   * @member - media source drm data\n   * @type {Array<Drm>}\n   */\n  drmData: Array<Drm>;\n  /**\n   * @member - media source bandwidth\n   * @type {number}\n   */\n  bandwidth: number;\n  /**\n   * @member - media source width\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - media source height\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - media source label\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourceObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourceObject {\n    const response: ProviderMediaSourceObject = {\n      id: this.id,\n      url: this.url,\n      mimetype: this.mimetype\n    };\n    if (this.bandwidth) response.bandwidth = this.bandwidth;\n    if (this.width) response.width = this.width;\n    if (this.height) response.height = this.height;\n    if (this.label) response.label = this.label;\n    if (this.drmData && this.drmData.length > 0) {\n      response.drmData = [];\n      this.drmData.forEach(d => {\n        if (Array.isArray(response.drmData)) {\n          response.drmData.push(d.toJSON());\n        }\n      });\n    }\n    return response;\n  }\n}\n","// @flow\nimport MultiRequestBuilder, {MultiRequestResult} from './multi-request-builder';\nimport Error from '../../util/error/error';\n\nexport default class DataLoaderManager {\n  /**\n   * @member - Loaders response map index\n   * @type {Map<string,Array<number>>}\n   * @private\n   */\n  _loadersResponseMap: Map<string, Array<number>> = new Map();\n  /**\n   * @member - Loaders multi request\n   * @type {MultiRequestBuilder}\n   * @protected\n   */\n  _multiRequest: MultiRequestBuilder;\n  /**\n   * @member - Loaders multi response\n   * @type {MultiRequestResult}\n   * @private\n   */\n  _multiResponse: MultiRequestResult;\n  /**\n   * @member - Loaders to execute\n   * @type {Map<string,Function>}\n   * @private\n   */\n  _loaders: Map<string, ILoader> = new Map();\n\n  _networkRetryConfig: ProviderNetworkRetryParameters;\n\n  constructor(networkRetryConfig: ProviderNetworkRetryParameters) {\n    this._networkRetryConfig = networkRetryConfig;\n  }\n\n  /**\n   * Add loader too execution loaders map\n   * @function\n   * @param {Function} loader Loader to add\n   * @param {Object} params Loader params\n   * @returns {void}\n   */\n  add(loader: Function, params: Object): void {\n    let execution_loader = new loader(params);\n    if (execution_loader.isValid()) {\n      this._loaders.set(loader.id, execution_loader);\n      // Get the start index from the multiReqeust before adding current execution_loader requests\n      let startIndex = this._multiRequest.requests.length;\n      // Get the requests\n      let requests = execution_loader.requests;\n      this._multiRequest.retryConfig = this._networkRetryConfig;\n      // Add requests to muktiRequest queue\n      requests.forEach(request => {\n        this._multiRequest.add(request);\n      });\n      // Create range array of current execution_loader requests\n      let executionLoaderResponseMap = Array.from(new Array(requests.length), (val, index) => index + startIndex);\n      // Add to map\n      this._loadersResponseMap.set(loader.id, executionLoaderResponseMap);\n    }\n  }\n\n  /**\n   * Get data from all loaders using multi request\n   * @function\n   * @returns {Promise} Promise\n   */\n  fetchData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._multiRequest.execute().then(\n        data => {\n          this._multiResponse = data.response;\n          let preparedData: Object = this.prepareData(data.response);\n          if (preparedData.success) {\n            resolve(this._loaders);\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.API_RESPONSE_MISMATCH, {\n                headers: data.headers\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n\n  /**\n   * Prepare fetched data\n   * @function\n   * @param {MultiRequestResult} response - The multi request result\n   * @returns {Object} - The prepared data\n   */\n  prepareData(response: MultiRequestResult): Object {\n    this._loaders.forEach((loader, name) => {\n      let loaderDataIndexes = this._loadersResponseMap.get(name);\n      try {\n        if (loaderDataIndexes && loaderDataIndexes.length > 0) {\n          loader.response = response.results.slice(loaderDataIndexes[0], loaderDataIndexes[loaderDataIndexes.length - 1] + 1);\n        }\n      } catch (err) {\n        return {success: false, error: err};\n      }\n    });\n    return {success: true, data: this._loaders};\n  }\n}\n","//@flow\nimport RequestBuilder from '../../util/request-builder';\nimport getLogger from '../../util/logger';\nimport ServiceResult from './base-service-result';\nimport Error from '../../util/error/error';\n\nexport default class MultiRequestBuilder extends RequestBuilder {\n  static _logger = getLogger('MultiRequestBuilder');\n  /**\n   * @memberof - MultiRequestBuilder\n   * @type {Array<RequestBuilder>}\n   */\n  requests: Array<RequestBuilder> = [];\n  /**\n   * Adds request to requests array\n   * @function add\n   * @param {RequestBuilder} request The request\n   * @returns {MultiRequestBuilder} The multiRequest\n   */\n  add(request: RequestBuilder): MultiRequestBuilder {\n    this.requests.push(request);\n    const requestParams = {};\n    const serviceDef: Object = {service: request.service, action: request.action};\n    Object.assign(requestParams, {[this.requests.length]: Object.assign(serviceDef, request.params)});\n    Object.assign(requestParams, this.params);\n    this.params = requestParams;\n    return this;\n  }\n\n  /**\n   * Executes a multi request\n   * @function execute\n   * @returns {Promise} The multirequest execution promise\n   */\n  execute(): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.params = JSON.stringify(this.params);\n      } catch (err) {\n        MultiRequestBuilder._logger.error(`${err.message}`);\n        reject(\n          new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.FAILED_PARSING_REQUEST, {\n            error: err,\n            params: this.params\n          })\n        );\n      }\n      this.doHttpRequest().then(\n        data => {\n          const multiRequestResult = new MultiRequestResult(data);\n          if (multiRequestResult.success) {\n            resolve({\n              headers: this.responseHeaders,\n              response: multiRequestResult\n            });\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MULTIREQUEST_API_ERROR, {\n                url: this.url,\n                headers: this.responseHeaders,\n                results: multiRequestResult.results\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n}\n\nexport class MultiRequestResult {\n  static _logger = getLogger('MultiRequestResult');\n  /**\n   * @memberof MultiRequestResult\n   * @type {boolean}\n   */\n  success: boolean;\n  /**\n   * @memberof MultiRequestResult\n   * @type {Object}\n   */\n  results: Array<ServiceResult> = [];\n  /**\n   * @constructor\n   * @param {Object} response data\n   */\n  constructor(response: Object) {\n    this.success = true;\n    const responseArr = response.result ? response.result : response;\n    responseArr.forEach(result => {\n      const serviceResult: ServiceResult = new ServiceResult(result);\n      this.results.push(serviceResult);\n      if (serviceResult.hasError) {\n        MultiRequestResult._logger.error(\n          `Service returned an error with error code: ${serviceResult.error.code} and message: ${serviceResult.error.message}.`\n        );\n        this.success = false;\n        return;\n      }\n    });\n  }\n}\n","//@flow\nexport default class KalturaAccessControlMessage {\n  /**\n   * @member - The access control message\n   * @type {string}\n   */\n  message: string;\n  /**\n   *  @member - The access control message code\n   * @@type {string}\n   */\n  code: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: Object) {\n    this.message = data.message;\n    this.code = data.code;\n  }\n}\n","//@flow\nexport default class Drm {\n  /**\n   * @member - license url\n   * @type {string}\n   */\n  licenseUrl: string;\n  /**\n   * @member - drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - drm certificate\n   * @type {string}\n   */\n  certificate: string;\n\n  /**\n   * @constructor\n   * @param {string} licenseUrl - the license url\n   * @param {string} scheme - the drm scheme\n   * @param {?string} certificate - the drm certificate\n   */\n  constructor(licenseUrl: string, scheme: string, certificate: ?string) {\n    this.licenseUrl = licenseUrl;\n    this.scheme = scheme;\n    if (certificate) {\n      this.certificate = certificate;\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderDrmDataObject} - The json class object.\n   */\n  toJSON(): ProviderDrmDataObject {\n    const response: ProviderDrmDataObject = {\n      licenseUrl: this.licenseUrl,\n      scheme: this.scheme\n    };\n    if (this.certificate) response.certificate = this.certificate;\n    return response;\n  }\n}\n","// @flow\nimport {getLogLevel, setLogLevel, setLogger, type LogLevelType, LogLevel} from '../../util/logger';\nimport DataLoaderManager from './data-loader-manager';\nimport Error from '../../util/error/error';\n\nexport default class BaseProvider<MI> {\n  _partnerId: number;\n  _widgetId: ?string;\n  _ks: string;\n  _uiConfId: ?number;\n  _dataLoader: DataLoaderManager;\n  _playerVersion: string;\n  _logger: any;\n  _isAnonymous: boolean;\n  _networkRetryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  get partnerId(): number {\n    return this._partnerId;\n  }\n\n  get widgetId(): string {\n    return this._widgetId || this.defaultWidgetId;\n  }\n\n  get defaultWidgetId(): string {\n    return '_' + this._partnerId;\n  }\n\n  get uiConfId(): ?number {\n    return this._uiConfId;\n  }\n\n  get ks(): string {\n    return this._ks;\n  }\n\n  set ks(value: string): void {\n    this._ks = value;\n  }\n\n  get playerVersion(): string {\n    return this._playerVersion;\n  }\n\n  get isAnonymous(): boolean {\n    return this._isAnonymous;\n  }\n\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    setLogger(options.logger);\n    this._partnerId = options.partnerId;\n    this._widgetId = options.widgetId;\n    this._uiConfId = options.uiConfId;\n    this._isAnonymous = !options.ks;\n    this._ks = options.ks || '';\n    this._playerVersion = playerVersion;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getMediaConfig(mediaInfo: MI): Promise<ProviderMediaConfigObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'getMediaConfig method must be implement by the derived class'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading playlist by id'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading entry list'\n      })\n    );\n  }\n\n  _verifyHasSources(sources: ProviderMediaConfigSourcesObject) {\n    if (sources.hls.concat(sources.dash, sources.progressive).length === 0) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MISSING_PLAY_SOURCE, {\n        action: '',\n        messages: `No play source for entry id: ${sources.id}`\n      });\n    }\n  }\n\n  get LogLevel(): LogLevelType {\n    return LogLevel;\n  }\n\n  getLogLevel(name?: string): Object {\n    return getLogLevel(name);\n  }\n\n  setLogLevel(level: Object, name?: string): void {\n    setLogLevel(level, name);\n  }\n}\n","const clone = data => {\n  let node;\n  if (Array.isArray(data)) {\n    node = data.length > 0 ? data.slice(0) : [];\n    node.forEach((e, i) => {\n      if ((typeof e === 'object' && e !== {}) || (Array.isArray(e) && e.length > 0)) {\n        node[i] = clone(e);\n      }\n    });\n  } else if (typeof data === 'object') {\n    node = Object.assign({}, data);\n    Object.keys(node).forEach(key => {\n      if ((typeof node[key] === 'object' && node[key] !== {}) || (Array.isArray(node[key]) && node[key].length > 0)) {\n        node[key] = clone(node[key]);\n      }\n    });\n  } else {\n    node = data;\n  }\n  return node;\n};\n\nexport {clone};\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class EntryList {\n  /**\n   * @member - entry list items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","//@flow\nimport {clone} from '../../util/clone';\n\nconst defaultConfig: Object = {\n  serviceUrl: 'https://cdnapisec.kaltura.com/api_v3',\n  cdnUrl: 'https://cdnapisec.kaltura.com',\n  serviceParams: {\n    apiVersion: '3.3.0',\n    format: 1\n  },\n  useApiCaptions: true\n};\n\nexport default class OVPConfiguration {\n  static set(clientConfig?: ProviderEnvConfigObject) {\n    if (clientConfig) {\n      Object.assign(defaultConfig, clientConfig);\n    }\n  }\n\n  static get(): Object {\n    return clone(defaultConfig);\n  }\n}\n\nexport {OVPConfiguration};\n","//@flow\nimport KalturaDrmPlaybackPluginData from '../../common/response-types/kaltura-drm-playback-plugin-data';\n\nexport type OVPKalturaPlaybackSource = KalturaPlaybackSource;\n\nexport default class KalturaPlaybackSource {\n  /**\n   * @member - source format according to delivery profile streamer type (applehttp, mpegdash etc.)\n   * @type {string}\n   */\n  format: string;\n  /**\n   * @member - delivery profile Id\n   * @type {string}\n   */\n  deliveryProfileId: string;\n  /**\n   * @member - The source URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - comma separated string according to deliveryProfile media protocols ('http,https' etc.)\n   * @type {string}\n   */\n  protocols: string;\n  /**\n   * @member - comma separated string of flavor ids\n   * @type {string}\n   */\n  flavorIds: string;\n  /**\n   * @member - drm data object containing relevant license url ,scheme name and certificate\n   * @type {Array<KalturaDrmPlaybackPluginData>}\n   */\n  drm: Array<KalturaDrmPlaybackPluginData> = [];\n\n  /**\n   * @constructor\n   * @param {Object} source The response\n   */\n  constructor(source: Object) {\n    this.format = source.format;\n    this.deliveryProfileId = source.deliveryProfileId;\n    this.url = source.url;\n    this.protocols = source.protocols;\n    this.flavorIds = source.flavorIds;\n    if (source.drm) {\n      source.drm.map(drm => this.drm.push(new KalturaDrmPlaybackPluginData(drm)));\n    }\n  }\n\n  /**\n   * Checks if source has DRM data\n   * @function hasDrmData\n   * @returns {boolean} Is source has DRM\n   */\n  hasDrmData(): boolean {\n    return this.drm && this.drm.length > 0;\n  }\n\n  /**\n   * Checks if source has flavor IDs\n   * @function hasFlavorIds\n   * @returns {boolean} Is source ha flavor IDs\n   */\n  hasFlavorIds(): boolean {\n    return !!this.flavorIds && this.flavorIds.length > 0;\n  }\n\n  /**\n   * Returns source desired protocol if supported\n   * @param {string} protocol - the desired protocol for the source (base play url protocol)\n   * @returns {string} - protocol if protocol is in the protocols list - if not empty string returned\n   */\n  getProtocol(protocol: string): string {\n    let returnValue: string = '';\n    if (this.protocols && this.protocols.length > 0) {\n      let protocolsArr: Array<string> = this.protocols.split(',');\n      protocolsArr.forEach(p => {\n        if (p === protocol) {\n          returnValue = p;\n        }\n      });\n    } else if (protocol === 'http') {\n      return protocol;\n    }\n    return returnValue;\n  }\n}\n","//@flow\nexport default class KalturaRuleAction {\n  static Type: {[type: string]: string | number} = {\n    DRM_POLICY: 'drm.DRM_POLICY',\n    BLOCK: 1,\n    PREVIEW: 2,\n    LIMIT_FLAVORS: 3,\n    ADD_TO_STORAGE: 4,\n    LIMIT_DELIVERY_PROFILES: 5,\n    SERVE_FROM_REMOTE_SERVER: 6,\n    REQUEST_HOST_REGEX: 7,\n    LIMIT_THUMBNAIL_CAPTURE: 8\n  };\n\n  /**\n   * @member - The type of the action\n   * @type {string|number}\n   */\n  type: string | number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.type = data.type;\n  }\n}\n","//@flow\nimport KalturaRuleAction from './kaltura-rule-action';\n\nexport default class KalturaAccessControlModifyRequestHostRegexAction extends KalturaRuleAction {\n  /**\n   * @member - Request host regex pattern\n   * @type {string}\n   */\n  pattern: string;\n  /**\n   * @member - Request host regex replacement\n   * @type {string}\n   */\n  replacement: string;\n  /**\n   * @member - serverNodeId to generate replacment host from\n   * @type {number}\n   */\n  replacmenServerNodeId: number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    super(data);\n    this.pattern = data.pattern;\n    this.replacement = data.replacement;\n    this.replacmenServerNodeId = data.replacmenServerNodeId;\n  }\n}\n","//@flow\nexport default class KalturaFlavorAsset {\n  static Status: {[status: string]: number} = {\n    ERROR: -1,\n    QUEUED: 0,\n    CONVERTING: 1,\n    READY: 2,\n    DELETED: 3,\n    NOT_APPLICABLE: 4,\n    TEMP: 5,\n    WAIT_FOR_CONVERT: 6,\n    IMPORTING: 7,\n    VALIDATING: 8,\n    EXPORTING: 9\n  };\n\n  /**\n   * @member - The ID of the Flavor Asset\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member -The Flavor Params used to create this Flavor Asset\n   * @type {string}\n   */\n  flavorParamsId: string;\n  /**\n   * @member -The file extension\n   * @type {string}\n   */\n  fileExt: string;\n  /**\n   * @member - The overall bitrate (in KBits) of the Flavor Asset\n   *  @type {string}\n   */\n  bitrate: number;\n  /**\n   * @member - The width of the Flavor Asset\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - The height of the Flavor Asset\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - The frame rate (in FPS) of the Flavor Asset\n   * @type {number}\n   */\n  frameRate: number;\n  /**\n   * @member - True if this Flavor Asset is the original source\n   * @type {number}\n   */\n  isOriginal: boolean;\n  /**\n   * @member - True if this Flavor Asset is playable in KDP\n   * @type {boolean}\n   */\n  isWeb: boolean;\n  /**\n   * @member - The container format\n   * @type {boolean}\n   */\n  containerFormat: string;\n  /**\n   *@member - The video codec\n   * @type {boolean}\n   */\n  videoCodecId: string;\n  /**\n   * @member - The status of the Flavor Asset\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - The language of the flavor asset\n   * @type {Status}\n   */\n  language: string;\n  /**\n   * @member - The label of the flavor asset\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: any) {\n    this.id = data.id;\n    this.flavorParamsId = data.flavorParamsId;\n    this.fileExt = data.fileExt;\n    this.bitrate = data.bitrate;\n    this.width = data.width;\n    this.height = data.height;\n    this.id = data.id;\n    this.frameRate = data.frameRate;\n    this.isOriginal = data.isOriginal;\n    this.isWeb = data.isWeb;\n    this.containerFormat = data.containerFormat;\n    this.videoCodecId = data.videoCodecId;\n    this.status = data.status;\n    this.language = data.language;\n    this.label = data.label;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaAccessControlMessage from '../../common/response-types/kaltura-access-control-message';\nimport KalturaPlaybackSource from './kaltura-playback-source';\nimport KalturaAccessControlModifyRequestHostRegexAction from './kaltura-access-control-modify-request-host-regex-action';\nimport KalturaRuleAction from './kaltura-rule-action';\nimport KalturaFlavorAsset from './kaltura-flavor-asset';\n\nexport default class KalturaPlaybackContext extends ServiceResult {\n  /**\n   * @member - The playback sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaRuleAction>}\n   */\n  actions: Array<KalturaRuleAction> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaAccessControlMessage>}\n   */\n  messages: Array<KalturaAccessControlMessage> = [];\n  /**\n   * @member - The flavor assets\n   * @type {Array<KalturaFlavorAsset>}\n   */\n  flavorAssets: Array<KalturaFlavorAsset> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      const messages = response.messages;\n      if (messages) {\n        messages.map(message => this.messages.push(new KalturaAccessControlMessage(message)));\n      }\n      const actions = response.actions;\n      if (actions) {\n        actions.map(action => {\n          if (action.type === KalturaRuleAction.Type.REQUEST_HOST_REGEX) {\n            this.actions.push(new KalturaAccessControlModifyRequestHostRegexAction(action));\n          } else {\n            this.actions.push(new KalturaRuleAction(action));\n          }\n        });\n      }\n      const sources = response.sources;\n      if (sources) {\n        sources.map(source => this.sources.push(new KalturaPlaybackSource(source)));\n      }\n      const flavorAssets = response.flavorAssets;\n      if (flavorAssets) {\n        flavorAssets.map(flavor => this.flavorAssets.push(new KalturaFlavorAsset(flavor)));\n      }\n    }\n  }\n\n  hasBlockAction(): boolean {\n    return this.getBlockAction() !== undefined;\n  }\n\n  getBlockAction(): ?KalturaRuleAction {\n    return this.actions.find(action => action.type === KalturaRuleAction.Type.BLOCK);\n  }\n\n  getErrorMessages(): Array<KalturaAccessControlMessage> {\n    return this.messages;\n  }\n\n  /**\n   * Get the KalturaAccessControlModifyRequestHostRegexAction action\n   * @function getRequestHostRegexAction\n   * @returns {?KalturaAccessControlModifyRequestHostRegexAction} The action\n   * */\n  getRequestHostRegexAction(): ?KalturaAccessControlModifyRequestHostRegexAction {\n    const action = this.actions.find(action => action.type === KalturaRuleAction.Type.REQUEST_HOST_REGEX);\n    if (action instanceof KalturaAccessControlModifyRequestHostRegexAction) {\n      return action;\n    }\n  }\n}\n","//@flow\nexport default class KalturaMetadata {\n  static ObjectType: {[type: string]: string | number} = {\n    AD_CUE_POINT: 'adCuePointMetadata.AdCuePoint',\n    ANNOTATION: 'annotationMetadata.Annotation',\n    CODE_CUE_POINT: 'codeCuePointMetadata.CodeCuePoint',\n    THUMB_CUE_POINT: 'thumbCuePointMetadata.thumbCuePoint',\n    ENTRY: 1,\n    CATEGORY: 2,\n    USER: 3,\n    PARTNER: 4,\n    DYNAMIC_OBJECT: 5\n  };\n\n  static Status: {[status: string]: number} = {\n    VALID: 1,\n    INVALID: 2,\n    DELETED: 3\n  };\n\n  id: number;\n  metadataProfileId: number;\n  metadataProfileVersion: number;\n  metadataObjectType: string | number;\n  objectId: string;\n  version: number;\n  created: Date;\n  updated: Date;\n  status: number;\n  xml: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The response\n   */\n  constructor(data: Object) {\n    this.id = data.id;\n    this.metadataProfileId = data.metadataProfileId;\n    this.metadataProfileVersion = data.metadataProfileVersion;\n    this.metadataProfileId = data.metadataProfileId;\n    this.metadataObjectType = data.metadataObjectType;\n    this.objectId = data.objectId;\n    this.version = data.version;\n    this.created = new Date(0);\n    this.created.setUTCSeconds(data.createdAt);\n    this.updated = new Date(0);\n    this.updated.setUTCSeconds(data.updatedAt);\n    this.status = data.status;\n    this.xml = data.xml;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMetadata from './kaltura-metadata';\n\nexport default class KalturaMetadataListResponse extends ServiceResult {\n  totalCount: number;\n  metas: Array<KalturaMetadata>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.totalCount = responseObj.totalCount;\n      if (this.totalCount > 0) {\n        this.metas = [];\n        responseObj.objects.map(meta => this.metas.push(new KalturaMetadata(meta)));\n      }\n    }\n  }\n}\n","//@flow\nexport default class KalturaMediaEntry {\n  static EntryType: {[entryType: string]: {value: number | string}} = {\n    AUTOMATIC: {value: -1},\n    EXTERNAL_MEDIA: {value: 'externalMedia.externalMedia'},\n    MEDIA_CLIP: {value: 1},\n    MIX: {value: 2},\n    PLAYLIST: {value: 5},\n    DATA: {value: 6},\n    LIVE_STREAM: {value: 7},\n    LIVE_CHANNEL: {value: 8},\n    DOCUMENT: {value: 10}\n  };\n\n  static MediaType: {[mediaType: string]: {value: number}} = {\n    VIDEO: {value: 1},\n    IMAGE: {value: 2},\n    AUDIO: {value: 5},\n    LIVE_STREAM_FLASH: {value: 201},\n    LIVE_STREAM_WINDOWS_MEDIA: {value: 202},\n    LIVE_STREAM_REAL_MEDIA: {value: 203},\n    LIVE_STREAM_QUICK_TIME: {value: 204}\n  };\n\n  static EntryStatus: {[status: string]: string | number} = {\n    ERROR_IMPORTING: -2,\n    ERROR_CONVERTING: -1,\n    SCAN_FAILURE: 'virusScan.ScanFailure',\n    IMPORT: 0,\n    INFECTED: 'virusScan.Infected',\n    PRECONVERT: 1,\n    READY: 2,\n    DELETED: 3,\n    PENDING: 4,\n    MODERATE: 5,\n    BLOCKED: 6,\n    NO_CONTENT: 7\n  };\n\n  static EntryModerationStatus: {[status: string]: number} = {\n    PENDING_MODERATION: 1,\n    APPROVED: 2,\n    REJECTED: 3,\n    FLAGGED_FOR_REVIEW: 4,\n    MODERATE: 5,\n    AUTO_APPROVED: 6\n  };\n\n  /**\n   * @member - The entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - The entry referenceId\n   * @type {string}\n   */\n  referenceId: string;\n  /**\n   * @member - The entry externalSourceType\n   * @type {string}\n   */\n  externalSourceType: string;\n  /**\n   * @member - Entry name (Min 1 chars)\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - Entry description\n   * @type {string}\n   */\n  description: string;\n  /**\n   * @member - The URL used for playback. This is not the download URL.\n   * @type {string}\n   */\n  dataUrl: string;\n  /**\n   * @member - Comma separated flavor params ids that exists for this media entry\n   * @type {string}\n   */\n  flavorParamsIds: string;\n  /**\n   * @member - The entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - The type of the entry, this is auto filled by the derived entry object\n   * @type {string | number}\n   */\n  type: string | number;\n  /**\n   * @member - The type of the entry, this is auto filled by the derived entry object (Image, Audio etc.)\n   * @type {number}\n   */\n  entryType: number;\n  /**\n   * @member - Entry poster image\n   * @type {string}\n   */\n  poster: string;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - Entry tags\n   * @type {string}\n   */\n  tags: string;\n\n  /**\n   * @member - Entry status\n   * @type {number}\n   */\n  status: number;\n\n  /**\n   * @constructor\n   * @param {Object} entry The json response\n   */\n  constructor(entry: Object) {\n    this.id = entry.id;\n    this.referenceId = entry.referenceId;\n    this.externalSourceType = entry.externalSourceType;\n    this.name = entry.name;\n    this.description = entry.description;\n    this.dataUrl = entry.dataUrl;\n    this.type = entry.type;\n    this.entryType = entry.mediaType;\n    this.flavorParamsIds = entry.flavorParamsIds;\n    this.duration = entry.duration;\n    this.poster = entry.thumbnailUrl;\n    this.status = entry.status;\n    this.dvrStatus = entry.dvrStatus;\n    this.tags = entry.tags;\n  }\n}\n","//@flow\nimport OVPConfiguration from './config';\n\ntype urlParamsType = {\n  partnerId: number,\n  entryId: string,\n  ks: string,\n  uiConfId: ?number,\n  format: string,\n  protocol: string,\n  extension: string,\n  flavorIds: ?string\n};\n\nexport default class PlaySourceUrlBuilder {\n  /**\n   * Returns source url by given url params\n   * @function build\n   * @param {urlParamsType} urlParams The params\n   * @returns {string} The URL\n   * @static\n   */\n  static build(urlParams: urlParamsType): string {\n    const config = OVPConfiguration.get();\n    const serviceUrlOrigin: string = config.serviceUrl.substr(0, config.serviceUrl.lastIndexOf('/'));\n    const {partnerId, entryId, ks, uiConfId, format, protocol, extension, flavorIds} = urlParams;\n\n    //verify mandatory params\n    if (!serviceUrlOrigin || !partnerId || !entryId || !format || !protocol) {\n      return '';\n    }\n\n    let playUrl = serviceUrlOrigin;\n    if (!serviceUrlOrigin.endsWith('/')) {\n      playUrl += '/';\n    }\n    playUrl += 'p/' + partnerId + '/sp/' + partnerId + '00' + '/playManifest/entryId/' + entryId + '/protocol/' + protocol + '/format/' + format;\n\n    if (flavorIds) {\n      playUrl += '/flavorIds/' + flavorIds;\n    } else if (uiConfId) {\n      playUrl += '/uiConfId/' + uiConfId;\n    }\n\n    if (ks !== '') {\n      playUrl += '/ks/' + ks;\n    }\n\n    if (extension !== '') {\n      playUrl += '/a.' + extension;\n    }\n\n    if (uiConfId && flavorIds !== '') {\n      playUrl += '?uiConfId=' + uiConfId;\n    }\n\n    return playUrl;\n  }\n}\n","//@flow\nexport default class XmlParser {\n  /**\n   * Parses xml string to json object\n   * @param {string} xml The xml to parse\n   * @returns {{}} The parsed xml as Json object\n   * @static\n   */\n  static xmlToJson(xml: Object) {\n    let obj = {};\n    if (xml.nodeType === 1) {\n      if (xml.attributes.length > 0) {\n        obj['@attributes'] = {};\n        for (let j = 0; j < xml.attributes.length; j++) {\n          let attribute = xml.attributes.item(j);\n          obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\n        }\n      }\n    } else if (xml.nodeType === 3) {\n      obj = xml.nodeValue;\n    }\n    if (xml.hasChildNodes()) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        let item = xml.childNodes.item(i);\n        let nodeName = item.nodeName;\n        if (typeof obj[nodeName] === 'undefined') {\n          obj[nodeName] = this.xmlToJson(item);\n        } else {\n          if (typeof obj[nodeName].push === 'undefined') {\n            let old = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(old);\n          }\n          obj[nodeName].push(this.xmlToJson(item));\n        }\n      }\n    }\n    return obj;\n  }\n}\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class Playlist {\n  /**\n   * @member - playlist id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - playlist name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - playlist description\n   * @type {string}\n   */\n  description: string;\n\n  /**\n   * @member - playlist poster\n   * @type {string}\n   */\n  poster: string;\n\n  /**\n   * @member - playlist items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","// @flow\n\nconst KalturaCaptionType: CaptionType = {\n  SRT: '1',\n  DFXP: '2',\n  WEBVTT: '3',\n  CAP: '4'\n};\n\nconst CaptionsFormatsMap: {[format: string]: string} = {\n  '3': 'vtt',\n  '1': 'srt'\n};\n\nclass ExternalCaptionsBuilder {\n  static createConfig(captions: Array<Object>): Array<PKExternalCaptionObject> {\n    return captions.map(caption => {\n      let url = caption.url;\n      let type = CaptionsFormatsMap[caption.format];\n      if ([KalturaCaptionType.DFXP, KalturaCaptionType.CAP].includes(caption.format)) {\n        url = caption.webVttUrl;\n        type = CaptionsFormatsMap[KalturaCaptionType.WEBVTT];\n      }\n      return {\n        default: !!caption.isDefault,\n        type: type,\n        language: caption.languageCode,\n        label: caption.label,\n        url: url\n      };\n    });\n  }\n}\n\nexport {ExternalCaptionsBuilder};\n","//@flow\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from './response-types/kaltura-metadata-list-response';\nimport KalturaMediaEntry from './response-types/kaltura-media-entry';\nimport KalturaPlaybackSource from './response-types/kaltura-playback-source';\nimport KalturaDrmPlaybackPluginData from '../common/response-types/kaltura-drm-playback-plugin-data';\nimport PlaySourceUrlBuilder from './play-source-url-builder';\nimport XmlParser from '../../util/xml-parser';\nimport getLogger from '../../util/logger';\nimport OVPConfiguration from './config';\nimport MediaEntry from '../../entities/media-entry';\nimport Drm from '../../entities/drm';\nimport MediaSource from '../../entities/media-source';\nimport MediaSources from '../../entities/media-sources';\nimport {SupportedStreamFormat, isProgressiveSource} from '../../entities/media-format';\nimport Playlist from '../../entities/playlist';\nimport EntryList from '../../entities/entry-list';\nimport KalturaRuleAction from './response-types/kaltura-rule-action';\nimport KalturaAccessControlMessage from '../common/response-types/kaltura-access-control-message';\nimport type {OVPMediaEntryLoaderResponse} from './loaders/media-entry-loader';\nimport {ExternalCaptionsBuilder} from './external-captions-builder';\n\nexport default class OVPProviderParser {\n  static _logger = getLogger('OVPProviderParser');\n\n  /**\n   * Returns parsed media entry by given OVP response objects\n   * @function getMediaEntry\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {any} mediaEntryResponse - The media entry response\n   * @returns {MediaEntry} - The media entry\n   * @static\n   * @public\n   */\n  static getMediaEntry(ks: string, partnerId: number, uiConfId: ?number, mediaEntryResponse: any): MediaEntry {\n    const mediaEntry = new MediaEntry();\n    const entry = mediaEntryResponse.entry;\n    const playbackContext = mediaEntryResponse.playBackContextResult;\n    const metadataList = mediaEntryResponse.metadataListResult;\n    const kalturaSources = playbackContext.sources;\n\n    mediaEntry.sources = OVPProviderParser._getParsedSources(kalturaSources, ks, partnerId, uiConfId, entry, playbackContext);\n    if (OVPConfiguration.get().useApiCaptions && playbackContext.data.playbackCaptions) {\n      mediaEntry.sources.captions = ExternalCaptionsBuilder.createConfig(playbackContext.data.playbackCaptions);\n    }\n    OVPProviderParser._fillBaseData(mediaEntry, entry, metadataList);\n    return mediaEntry;\n  }\n\n  /**\n   * Returns parsed playlist by given OVP response objects\n   * @function getPlaylist\n   * @param {any} playlistResponse - The playlist response\n   * @returns {Playlist} - The playlist\n   * @static\n   * @public\n   */\n  static getPlaylist(playlistResponse: any): Playlist {\n    const playlist = new Playlist();\n    const playlistData = playlistResponse.playlistData;\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlist.id = playlistData.id;\n    playlist.name = playlistData.name;\n    playlist.description = playlistData.description;\n    playlist.poster = playlistData.poster;\n    playlistItems.forEach((entry: KalturaMediaEntry) => {\n      const mediaEntry = new MediaEntry();\n      OVPProviderParser._fillBaseData(mediaEntry, entry);\n      playlist.items.push(mediaEntry);\n    });\n    return playlist;\n  }\n\n  /**\n   * Returns parsed entry list by given OVP response objects\n   * @function getEntryList\n   * @param {any} playlistResponse - response\n   * @returns {Playlist} - The entry list\n   * @static\n   * @public\n   */\n  static getEntryList(playlistResponse: any): EntryList {\n    const entryList = new EntryList();\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlistItems.forEach(entry => {\n      const mediaEntry = new MediaEntry();\n      OVPProviderParser._fillBaseData(mediaEntry, entry);\n      entryList.items.push(mediaEntry);\n    });\n    return entryList;\n  }\n\n  static _fillBaseData(mediaEntry: MediaEntry, entry: KalturaMediaEntry, metadataList: ?KalturaMetadataListResponse) {\n    mediaEntry.poster = entry.poster;\n    mediaEntry.id = entry.id;\n    mediaEntry.duration = entry.duration;\n    mediaEntry.metadata = OVPProviderParser._parseMetadata(metadataList);\n    mediaEntry.metadata.description = entry.description || '';\n    mediaEntry.metadata.name = entry.name || '';\n    mediaEntry.metadata.tags = entry.tags || '';\n    mediaEntry.status = entry.status;\n\n    mediaEntry.type = OVPProviderParser._getEntryType(entry.entryType, entry.type);\n    if (mediaEntry.type === MediaEntry.Type.LIVE) {\n      mediaEntry.dvrStatus = entry.dvrStatus;\n    }\n\n    return mediaEntry;\n  }\n\n  static _getEntryType(entryTypeEnum: number, typeEnum: number | string): string {\n    let type = MediaEntry.Type.UNKNOWN;\n    switch (entryTypeEnum) {\n      case KalturaMediaEntry.MediaType.IMAGE.value:\n        type = MediaEntry.Type.IMAGE;\n        break;\n      case KalturaMediaEntry.MediaType.AUDIO.value:\n        type = MediaEntry.Type.AUDIO;\n        break;\n      default:\n        switch (typeEnum) {\n          case KalturaMediaEntry.EntryType.MEDIA_CLIP.value:\n            type = MediaEntry.Type.VOD;\n            break;\n          case KalturaMediaEntry.EntryType.LIVE_STREAM.value:\n          case KalturaMediaEntry.EntryType.LIVE_CHANNEL.value:\n            type = MediaEntry.Type.LIVE;\n            break;\n          default:\n            type = MediaEntry.Type.UNKNOWN;\n        }\n    }\n    return type;\n  }\n\n  /**\n   * Returns the parsed sources\n   * @function _getParsedSources\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {Object} entry - The entry\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @return {MediaSources} - A media sources\n   * @static\n   * @private\n   */\n  static _getParsedSources(\n    kalturaSources: Array<KalturaPlaybackSource>,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entry: Object,\n    playbackContext: KalturaPlaybackContext\n  ): MediaSources {\n    const sources = new MediaSources();\n    const addAdaptiveSource = (source: KalturaPlaybackSource) => {\n      const parsedSource = OVPProviderParser._parseAdaptiveSource(source, playbackContext, ks, partnerId, uiConfId, entry.id);\n      if (parsedSource) {\n        const sourceFormat = SupportedStreamFormat.get(source.format);\n        sources.map(parsedSource, sourceFormat);\n      }\n    };\n    const parseAdaptiveSources = () => {\n      kalturaSources.filter(source => !isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    const parseProgressiveSources = () => {\n      const progressiveSource = kalturaSources.find(source => {\n        //match progressive source with supported protocol(http/s)\n        return isProgressiveSource(source.format) && source.getProtocol(OVPProviderParser._getBaseProtocol()) !== '';\n      });\n      sources.progressive = OVPProviderParser._parseProgressiveSources(progressiveSource, playbackContext, ks, partnerId, uiConfId, entry.id);\n    };\n\n    const parseExternalMedia = () => {\n      const mediaSource = new MediaSource();\n      mediaSource.mimetype = 'video/youtube';\n      mediaSource.url = entry.referenceId;\n      mediaSource.id = entry.id + '_youtube';\n      sources.progressive.push(mediaSource);\n    };\n\n    if (entry.type === KalturaMediaEntry.EntryType.EXTERNAL_MEDIA.value) {\n      parseExternalMedia();\n    } else if (kalturaSources && kalturaSources.length > 0) {\n      parseAdaptiveSources();\n      parseProgressiveSources();\n    }\n    return sources;\n  }\n\n  /**\n   * Returns a parsed adaptive source\n   * @function _parseAdaptiveSource\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {string} entryId - The entry id\n   * @returns {?MediaSource} - The parsed adaptive kalturaSource\n   * @static\n   * @private\n   */\n  static _parseAdaptiveSource(\n    kalturaSource: ?KalturaPlaybackSource,\n    playbackContext: KalturaPlaybackContext,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entryId: string\n  ): ?MediaSource {\n    const mediaSource: MediaSource = new MediaSource();\n    if (kalturaSource) {\n      let playUrl: string = '';\n      const mediaFormat = SupportedStreamFormat.get(kalturaSource.format);\n      const protocol = kalturaSource.getProtocol(OVPProviderParser._getBaseProtocol());\n      const deliveryProfileId = kalturaSource.deliveryProfileId;\n      const format = kalturaSource.format;\n      let extension: string = '';\n      if (mediaFormat) {\n        extension = mediaFormat.pathExt;\n        mediaSource.mimetype = mediaFormat.mimeType;\n      }\n      // in case playbackSource doesn't have flavors we don't need to build the url and we'll use the provided one.\n      if (kalturaSource.hasFlavorIds()) {\n        if (!extension && playbackContext.flavorAssets && playbackContext.flavorAssets.length > 0) {\n          extension = playbackContext.flavorAssets[0].fileExt;\n        }\n        playUrl = PlaySourceUrlBuilder.build({\n          entryId,\n          flavorIds: kalturaSource.flavorIds,\n          format,\n          ks,\n          partnerId,\n          uiConfId,\n          extension,\n          protocol\n        });\n      } else {\n        playUrl = kalturaSource.url;\n      }\n      if (!playUrl) {\n        const message = `failed to create play url from source, discarding source: (${entryId}_${deliveryProfileId}), ${format}`;\n        OVPProviderParser._logger.warn(message);\n        return null;\n      }\n      mediaSource.url = OVPProviderParser._applyRegexAction(playbackContext, playUrl);\n      mediaSource.id = entryId + '_' + deliveryProfileId + ',' + format;\n      if (kalturaSource.hasDrmData()) {\n        const drmParams: Array<Drm> = [];\n        kalturaSource.drm.forEach(drm => {\n          drmParams.push(new Drm(drm.licenseURL, KalturaDrmPlaybackPluginData.Scheme[drm.scheme], drm.certificate));\n        });\n        mediaSource.drmData = drmParams;\n      }\n    }\n    return mediaSource;\n  }\n\n  /**\n   * Returns parsed progressive sources\n   * @function _parseProgressiveSources\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {string} entryId - The entry id\n   * @returns {Array<MediaSource>} - The parsed progressive kalturaSources\n   * @static\n   * @private\n   */\n  static _parseProgressiveSources(\n    kalturaSource: ?KalturaPlaybackSource,\n    playbackContext: KalturaPlaybackContext,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entryId: string\n  ): Array<MediaSource> {\n    const videoSources: Array<MediaSource> = [];\n    const audioSources: Array<MediaSource> = [];\n    if (kalturaSource) {\n      const protocol = kalturaSource.getProtocol(OVPProviderParser._getBaseProtocol());\n      const format = kalturaSource.format;\n      const deliveryProfileId = kalturaSource.deliveryProfileId;\n      const sourceId = deliveryProfileId + ',' + format;\n      playbackContext.flavorAssets.map(flavor => {\n        const mediaSource: MediaSource = new MediaSource();\n        mediaSource.id = flavor.id + sourceId;\n        mediaSource.mimetype = flavor.fileExt === 'mp3' ? 'audio/mp3' : 'video/mp4';\n        mediaSource.height = flavor.height;\n        mediaSource.width = flavor.width;\n        mediaSource.bandwidth = flavor.bitrate * 1024;\n        mediaSource.label = flavor.label || flavor.language;\n        const playUrl = PlaySourceUrlBuilder.build({\n          entryId,\n          flavorIds: flavor.id,\n          format,\n          ks,\n          partnerId: partnerId,\n          uiConfId: uiConfId,\n          extension: flavor.fileExt,\n          protocol\n        });\n        if (playUrl === '') {\n          OVPProviderParser._logger.warn(`failed to create play url from source, discarding source: (${entryId}_${deliveryProfileId}), ${format}.`);\n          return null;\n        } else {\n          mediaSource.url = OVPProviderParser._applyRegexAction(playbackContext, playUrl);\n          if (flavor.height && flavor.width) {\n            videoSources.push(mediaSource);\n          } else {\n            audioSources.push(mediaSource);\n          }\n        }\n      });\n    }\n    //If we have only audio flavors return them, otherwise return video flavors\n    return audioSources.length && !videoSources.length ? audioSources : videoSources;\n  }\n\n  /**\n   * Ovp metadata parser\n   * @function _parseMetaData\n   * @param {KalturaMetadataListResponse} metadataList The metadata list\n   * @returns {Object} Parsed metadata\n   * @static\n   * @private\n   */\n  static _parseMetadata(metadataList: ?KalturaMetadataListResponse): Object {\n    const metadata = {};\n    if (metadataList && metadataList.metas && metadataList.metas.length > 0) {\n      metadataList.metas.forEach(meta => {\n        if (meta.xml) {\n          let metaXml: Object;\n          const domParser: DOMParser = new DOMParser();\n          meta.xml = meta.xml.replace(/\\r?\\n|\\r/g, '');\n          meta.xml = meta.xml.replace(/>\\s*/g, '>');\n          meta.xml = meta.xml.replace(/>\\s*/g, '>');\n          metaXml = domParser.parseFromString(meta.xml, 'text/xml');\n          const metasObj: Object = XmlParser.xmlToJson(metaXml);\n          const metaKeys = Object.keys(metasObj.metadata);\n          metaKeys.forEach(key => {\n            metadata[key] = metasObj.metadata[key]['#text'];\n          });\n        }\n      });\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the base protocol\n   * @function _getBaseProtocol\n   * @returns {string} - The base protocol\n   * @static\n   * @private\n   */\n  static _getBaseProtocol(): string {\n    const config = OVPConfiguration.get();\n    const protocolRegex = /^https?:/;\n    const result = protocolRegex.exec(config.cdnUrl);\n    const protocol = result ? result[0] : document.location.protocol;\n    if (typeof protocol === 'string') {\n      return protocol.slice(0, -1); // remove ':' from the end\n    }\n    return 'https';\n  }\n\n  static hasBlockAction(response: OVPMediaEntryLoaderResponse): boolean {\n    return response.playBackContextResult.hasBlockAction();\n  }\n\n  static getBlockAction(response: OVPMediaEntryLoaderResponse): ?KalturaRuleAction {\n    return response.playBackContextResult.getBlockAction();\n  }\n\n  static getErrorMessages(response: OVPMediaEntryLoaderResponse): Array<KalturaAccessControlMessage> {\n    return response.playBackContextResult.getErrorMessages();\n  }\n\n  /**\n   * Applies the request host regex on the url\n   * @function _applyRegexAction\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} playUrl - The original url\n   * @returns {string} - The request host regex applied url\n   * @static\n   * @private\n   */\n  static _applyRegexAction(playbackContext: KalturaPlaybackContext, playUrl: string): string {\n    const regexAction = playbackContext.getRequestHostRegexAction();\n    if (regexAction) {\n      const regex = new RegExp(regexAction.pattern, 'i');\n      if (playUrl.match(regex)) {\n        return playUrl.replace(regex, regexAction.replacement + '/');\n      }\n    }\n    return playUrl;\n  }\n}\n","//@flow\nimport MultiRequestBuilder from '../../common/multi-request-builder';\nimport OVPConfiguration from '../config';\n\nconst SERVICE_NAME: string = 'multirequest';\n\nexport default class OVPService {\n  /**\n   * Gets a new instance of MultiRequestBuilder with ovp params\n   * @function getMultiRequest\n   * @param {string} playerVersion The player version\n   * @param {string} ks The ks\n   * @param {string} partnerId The partner ID\n   * @returns {MultiRequestBuilder} The multi request builder\n   * @static\n   */\n  static getMultiRequest(playerVersion: string, ks: string, partnerId?: number): MultiRequestBuilder {\n    const config = OVPConfiguration.get();\n    const ovpParams = config.serviceParams;\n    Object.assign(ovpParams, {ks: ks, clientTag: 'html5:v' + playerVersion});\n    if (partnerId) {\n      Object.assign(ovpParams, {partnerId: partnerId});\n    }\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const multiReq = new MultiRequestBuilder(headers);\n    multiReq.method = 'POST';\n    multiReq.service = SERVICE_NAME;\n    multiReq.url = multiReq.getUrl(config.serviceUrl);\n    multiReq.params = ovpParams;\n    return multiReq;\n  }\n}\n","//@flow\nconst FIELDS =\n  'id,referenceId,name,description,thumbnailUrl,dataUrl,duration,msDuration,flavorParamsIds,mediaType,type,tags,dvrStatus,externalSourceType,status';\n\nexport default class BaseEntryResponseProfile {\n  static Type: {[type: string]: number} = {\n    INCLUDE_FIELDS: 1,\n    EXCLUDE_FIELDS: 2\n  };\n  /**\n   * @member - the response profile type\n   * @type {number}\n   */\n  type: number;\n  /**\n   * @member - Comma separated fields list to be included or excluded\n   * @type {string}\n   */\n  fields: string;\n\n  /**\n   * @constructor\n   * @param {Object} responseProfile -\n   */\n  constructor(responseProfile: Object = {}) {\n    this.type = responseProfile.type || BaseEntryResponseProfile.Type.INCLUDE_FIELDS;\n    this.fields = responseProfile.fields || FIELDS;\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\nimport BaseEntryResponseProfile from '../request-params/base-entry-response-profile';\n\nconst SERVICE_NAME: string = 'baseEntry';\n\nexport default class OVPBaseEntryService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for baseentry.getPlaybackContext\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static getPlaybackContext(serviceUrl: string, ks: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    const serviceEntryId = ks === '{1:result:ks}' ? '{2:result:objects:0:id}' : '{1:result:objects:0:id}';\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'getPlaybackContext';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'baseEntry-getPlaybackContext';\n    const contextDataParams = {objectType: 'KalturaContextDataParams', flavorTags: 'all'};\n    request.params = {entryId: serviceEntryId, ks: ks, contextDataParams: contextDataParams};\n    return request;\n  }\n\n  /**\n   * Creates an instance of RequestBuilder for baseentry.list\n   * @function list\n   * @param {string} serviceUrl The base URL\n   * @param {string} ks The ks\n   * @param {string} entryId The entry ID\n   * @param {boolean} redirectFromEntryId whether the live entry should continue and play the VOD one after the live stream ends.\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static list(serviceUrl: string, ks: string, entryId: string, redirectFromEntryId: boolean): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'list';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'list';\n    request.params = OVPBaseEntryService.getEntryListReqParams(entryId, ks, redirectFromEntryId);\n    return request;\n  }\n\n  /**\n   * Gets  baseentry.list service params\n   * @function getEntryListReqParams\n   * @param {string} entryId The entry ID\n   * @param {string} ks The ks\n   * @param {boolean} redirectFromEntryId whether the live entry should continue and play the VOD one after the live stream ends.\n   * @returns {{ks: string, filter: {redirectFromEntryId: string}, responseProfile: {fields: string, type: number}}} The service params object\n   * @static\n   */\n  static getEntryListReqParams(entryId: string, ks: string, redirectFromEntryId: boolean): any {\n    const filterParams = redirectFromEntryId ? {redirectFromEntryId: entryId} : {idEqual: entryId};\n    return {ks: ks, filter: filterParams, responseProfile: new BaseEntryResponseProfile()};\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'metadata_metadata';\n\nexport default class OVPMetadataService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for metadata_metadata.list\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {string} entryId The entry ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static list(serviceUrl: string, ks: string, entryId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'list';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'metadata_metadata-list';\n    const filter = {objectType: 'KalturaMetadataFilter', objectIdEqual: entryId, metadataObjectTypeEqual: '1'};\n    request.params = {filter: filter, ks: ks};\n    return request;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMediaEntry from './kaltura-media-entry';\n\nexport default class KalturaBaseEntryListResponse extends ServiceResult {\n  /**\n   * @member - The total count\n   * @type {number}\n   */\n  totalCount: number;\n  /**\n   * @member - The entries\n   * @type {Array<KalturaMediaEntry>}\n   */\n  entries: Array<KalturaMediaEntry>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The json response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.totalCount = responseObj.totalCount;\n      if (this.totalCount > 0) {\n        this.entries = [];\n        responseObj.objects.map(entry => this.entries.push(new KalturaMediaEntry(entry)));\n      }\n    }\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPBaseEntryService from '../services/base-entry-service';\nimport OVPMetadataService from '../services/meta-data-service';\nimport OVPConfiguration from '../config';\nimport KalturaPlaybackContext from '../response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from '../response-types/kaltura-metadata-list-response';\nimport KalturaBaseEntryListResponse from '../response-types/kaltura-base-entry-list-response';\nimport KalturaMediaEntry from '../response-types/kaltura-media-entry';\n\ntype OVPMediaEntryLoaderResponse = {\n  entry: KalturaMediaEntry,\n  playBackContextResult: KalturaPlaybackContext,\n  metadataListResult: KalturaMetadataListResponse\n};\nexport type {OVPMediaEntryLoaderResponse};\n\nexport default class OVPMediaEntryLoader implements ILoader {\n  _entryId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'media';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   * @boolean {boolean} useExternalCaptions - if we should add captions request to the multirequests.\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entryId = params.entryId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    let mediaEntryResponse: KalturaBaseEntryListResponse = new KalturaBaseEntryListResponse(response[0].data);\n    this._response.entry = mediaEntryResponse.entries[0];\n    this._response.playBackContextResult = new KalturaPlaybackContext(response[1].data);\n    this._response.metadataListResult = new KalturaMetadataListResponse(response[2].data);\n  }\n\n  get response(): OVPMediaEntryLoaderResponse {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, params.entryId, params.redirectFromEntryId));\n    requests.push(OVPBaseEntryService.getPlaybackContext(config.serviceUrl, params.ks));\n    requests.push(OVPMetadataService.list(config.serviceUrl, params.ks, params.entryId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._entryId;\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'session';\n\nexport default class OVPSessionService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} widgetId The widget ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static anonymousSession(serviceUrl: string, widgetId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'startWidgetSession';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'session-startWidget';\n    request.params = {widgetId};\n    return request;\n  }\n}\n","//@flow\nimport OVPSessionService from '../services/session-service';\nimport OVPConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\n\nexport default class OVPSessionLoader implements ILoader {\n  _widgetId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'session';\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.ks = response[0].data.ks;\n  }\n\n  get response(): any {\n    return this._response.ks;\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._widgetId = params.widgetId;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPSessionService.anonymousSession(config.serviceUrl, params.widgetId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._widgetId;\n  }\n}\n","// @flow\nimport DataLoaderManager from '../../common/data-loader-manager';\nimport OVPService from '../services/ovp-service';\n\n/**\n * OTTDataLoaderManager is a class that handles the OVP data loading\n * @param {string} playerVersion - player version\n * @param {string} partnerId - partner id\n * @param {string} ks - ks\n * @param {ProviderNetworkRetryParameters} [networkRetryConfig] - network retry configuration\n */\nexport default class OVPDataLoaderManager extends DataLoaderManager {\n  constructor(playerVersion: string, partnerId: number, ks: string = '', networkRetryConfig: ProviderNetworkRetryParameters) {\n    super(networkRetryConfig);\n    this._multiRequest = OVPService.getMultiRequest(playerVersion, ks, partnerId);\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\nimport BaseEntryResponseProfile from '../request-params/base-entry-response-profile';\n\nconst SERVICE_NAME: string = 'playlist';\n\nexport default class OVPPlaylistService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for playlist.getPlaybackContext\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {string} playlistId The playlist ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static execute(serviceUrl: string, ks: string, playlistId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'execute';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = `${SERVICE_NAME}-execute`;\n    request.params = {\n      ks: ks,\n      id: playlistId,\n      responseProfile: new BaseEntryResponseProfile()\n    };\n    return request;\n  }\n\n  /**\n   * Creates an instance of RequestBuilder for playlist.list\n   * @function list\n   * @param {string} serviceUrl The base URL\n   * @param {string} ks The ks\n   * @param {string} playlistId The playlist ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static get(serviceUrl: string, ks: string, playlistId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'get';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = `${SERVICE_NAME}-get`;\n    request.params = {\n      ks: ks,\n      id: playlistId,\n      responseProfile: {\n        fields: 'id,name,description,thumbnailUrl',\n        type: 1\n      }\n    };\n    return request;\n  }\n}\n","//@flow\n\nexport default class KalturaPlaylist {\n  /**\n   * @member - playlist id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - playlist name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - playlist description\n   * @type {string}\n   */\n  description: string;\n  /**\n   * @member - playlist poster image\n   * @type {string}\n   */\n  poster: string;\n\n  /**\n   * @constructor\n   * @param {Object} playlist - The json response\n   */\n  constructor(playlist: Object) {\n    this.id = playlist.id;\n    this.name = playlist.name;\n    this.description = playlist.description;\n    this.poster = playlist.thumbnailUrl;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMediaEntry from './kaltura-media-entry';\n\nexport default class KalturaMediaEntries extends ServiceResult {\n  /**\n   * @member - The entries\n   * @type {Array<KalturaMediaEntry>}\n   */\n  entries: Array<KalturaMediaEntry>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The json response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.entries = [];\n      responseObj.map(entry => this.entries.push(new KalturaMediaEntry(entry)));\n    }\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPPlaylistService from '../services/playlist-service';\nimport OVPConfiguration from '../config';\nimport KalturaPlaylist from '../response-types/kaltura-playlist';\nimport KalturaMediaEntries from '../response-types/kaltura-media-entries';\n\nexport default class OVPPlaylistLoader implements ILoader {\n  _playlistId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'playlist';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._playlistId = params.playlistId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.playlistData = new KalturaPlaylist(response[0].data);\n    this._response.playlistItems = new KalturaMediaEntries(response[1].data);\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPPlaylistService.get(config.serviceUrl, params.ks, params.playlistId));\n    requests.push(OVPPlaylistService.execute(config.serviceUrl, params.ks, params.playlistId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._playlistId;\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPConfiguration from '../config';\nimport OVPBaseEntryService from '../services/base-entry-service';\nimport KalturaBaseEntryListResponse from '../response-types/kaltura-base-entry-list-response';\n\nexport default class OVPEntryListLoader implements ILoader {\n  _entries: Array<string>;\n  _requests: Array<RequestBuilder>;\n  _response: any = {playlistItems: {entries: []}};\n\n  static get id(): string {\n    return 'entry_list';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entries = params.entries;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    let mediaEntryResponse: KalturaBaseEntryListResponse;\n    response.forEach(item => {\n      mediaEntryResponse = new KalturaBaseEntryListResponse(item.data);\n      this._response.playlistItems.entries.push(mediaEntryResponse.entries[0]);\n    });\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    params.entries.forEach(entry => {\n      requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, entry.entryId || entry, params.redirectFromEntryId));\n    });\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entries && this._entries.length);\n  }\n}\n","//@flow\nimport getLogger from '../../util/logger';\nimport OVPConfiguration from './config';\nimport OVPProviderParser from './provider-parser';\nimport KalturaMediaEntry from './response-types/kaltura-media-entry';\nimport OVPMediaEntryLoader from './loaders/media-entry-loader';\nimport OVPSessionLoader from './loaders/session-loader';\nimport OVPDataLoaderManager from './loaders/data-loader-manager';\nimport OVPPlaylistLoader from './loaders/playlist-loader';\nimport BaseProvider from '../common/base-provider';\nimport MediaEntry from '../../entities/media-entry';\nimport OVPEntryListLoader from './loaders/entry-list-loader';\nimport Error from '../../util/error/error';\n\nexport default class OVPProvider extends BaseProvider<OVPProviderMediaInfoObject> {\n  _filterOptionsConfig: ProviderFilterOptionsObject = {redirectFromEntryId: true};\n  /**\n   * @constructor\n   * @param {ProviderOptionsObject} options - provider options\n   * @param {string} playerVersion - player version\n   */\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    super(options, playerVersion);\n    this._logger = getLogger('OVPProvider');\n    OVPConfiguration.set(options.env);\n    this._setFilterOptionsConfig(options.filterOptions);\n    this._networkRetryConfig = Object.assign(this._networkRetryConfig, options.networkRetryParameters);\n  }\n\n  /**\n   * Gets the backend media config.\n   * @param {OVPProviderMediaInfoObject} mediaInfo - ovp media info\n   * @returns {Promise<ProviderMediaConfigObject>} - The provider media config\n   */\n  getMediaConfig(mediaInfo: OVPProviderMediaInfoObject): Promise<ProviderMediaConfigObject> {\n    if (mediaInfo.ks) {\n      this.ks = mediaInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entryId = mediaInfo.entryId;\n      if (entryId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(mediaInfo);\n        this._dataLoader.add(OVPMediaEntryLoader, {entryId, ks, redirectFromEntryId});\n        return this._dataLoader.fetchData().then(\n          response => {\n            try {\n              resolve(this._parseDataFromResponse(response));\n            } catch (err) {\n              reject(err);\n            }\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject(new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.MISSING_MANDATORY_PARAMS, {message: 'missing entry id'}));\n      }\n    });\n  }\n\n  _getEntryRedirectFilter(mediaInfo: Object): boolean {\n    return typeof mediaInfo.redirectFromEntryId === 'boolean'\n      ? mediaInfo.redirectFromEntryId\n      : typeof this._filterOptionsConfig.redirectFromEntryId === 'boolean'\n      ? this._filterOptionsConfig.redirectFromEntryId\n      : true;\n  }\n\n  _setFilterOptionsConfig(options?: ProviderFilterOptionsObject): void {\n    if (options && typeof options.redirectFromEntryId == 'boolean') {\n      this._filterOptionsConfig.redirectFromEntryId = options.redirectFromEntryId;\n    }\n  }\n\n  _parseDataFromResponse(data: Map<string, Function>): ProviderMediaConfigObject {\n    this._logger.debug('Data parsing started');\n    const mediaConfig: ProviderMediaConfigObject = {\n      session: {\n        isAnonymous: this._isAnonymous,\n        partnerId: this.partnerId\n      },\n      sources: this._getDefaultSourcesObject(),\n      plugins: {}\n    };\n\n    if (this.uiConfId) {\n      mediaConfig.session.uiConfId = this.uiConfId;\n    }\n    if (data) {\n      if (data.has(OVPSessionLoader.id)) {\n        const sessionLoader = data.get(OVPSessionLoader.id);\n        if (sessionLoader && sessionLoader.response) {\n          mediaConfig.session.ks = sessionLoader.response;\n          if (this.widgetId !== this.defaultWidgetId) {\n            this.ks = mediaConfig.session.ks;\n          }\n        }\n      } else {\n        mediaConfig.session.ks = this.ks;\n      }\n      if (data.has(OVPMediaEntryLoader.id)) {\n        const mediaLoader = data.get(OVPMediaEntryLoader.id);\n        if (mediaLoader && mediaLoader.response) {\n          const response = (mediaLoader: OVPMediaEntryLoader).response;\n          if (OVPProviderParser.hasBlockAction(response)) {\n            throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.BLOCK_ACTION, {\n              action: OVPProviderParser.getBlockAction(response),\n              messages: OVPProviderParser.getErrorMessages(response)\n            });\n          }\n          const mediaEntry = OVPProviderParser.getMediaEntry(this.isAnonymous ? '' : this.ks, this.partnerId, this.uiConfId, response);\n          Object.assign(mediaConfig.sources, this._getSourcesObject(mediaEntry));\n          this._verifyMediaStatus(mediaEntry);\n          this._verifyHasSources(mediaConfig.sources);\n        }\n      }\n    }\n    this._logger.debug('Data parsing finished', mediaConfig);\n    return mediaConfig;\n  }\n\n  /**\n   * Checks media is ready for playback (not being imported or converted)\n   * @param {MediaEntry} mediaEntry - the media entry info\n   * @returns {void}\n   */\n  _verifyMediaStatus(mediaEntry: MediaEntry) {\n    if ([KalturaMediaEntry.EntryStatus.IMPORT, KalturaMediaEntry.EntryStatus.PRECONVERT].includes(mediaEntry.status)) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MEDIA_STATUS_NOT_READY, {\n        messages: `Status of entry id ${mediaEntry.id} is ${mediaEntry.status} and is still being imported or converted`,\n        data: {status}\n      });\n    }\n  }\n  /**\n   * Gets the backend playlist config.\n   * @param {ProviderPlaylistInfoObject} playlistInfo - ovp playlist info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    if (playlistInfo.ks) {\n      this.ks = playlistInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const playlistId = playlistInfo.playlistId;\n      if (playlistId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        this._dataLoader.add(OVPPlaylistLoader, {playlistId, ks});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parsePlaylistDataFromResponse(response));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parsePlaylistDataFromResponse(data: Map<string, Function>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = this._getPlaylistObject();\n    if (data && data.has(OVPPlaylistLoader.id)) {\n      const playlistLoader = data.get(OVPPlaylistLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const playlist = OVPProviderParser.getPlaylist(playlistLoader.response);\n        playlistConfig.id = playlist.id;\n        playlistConfig.poster = playlist.poster;\n        playlistConfig.metadata.name = playlist.name;\n        playlistConfig.metadata.description = playlist.description;\n        playlist.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  /**\n   * Gets playlist config from entry list.\n   * @param {ProviderEntryListObject} entryListInfo - ovp entry list info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    if (entryListInfo.ks) {\n      this.ks = entryListInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entries = entryListInfo.entries;\n      if (entries && entries.length) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(entryListInfo);\n        this._dataLoader.add(OVPEntryListLoader, {entries, ks, redirectFromEntryId});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parseEntryListDataFromResponse(response));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parseEntryListDataFromResponse(data: Map<string, Function>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = this._getPlaylistObject();\n    if (data && data.has(OVPEntryListLoader.id)) {\n      const playlistLoader = data.get(OVPEntryListLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const entryList = OVPProviderParser.getEntryList(playlistLoader.response);\n        entryList.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  _getPlaylistObject(): ProviderPlaylistObject {\n    return {\n      id: '',\n      metadata: {\n        name: '',\n        description: ''\n      },\n      poster: '',\n      items: []\n    };\n  }\n\n  _getDefaultSourcesObject(): ProviderMediaConfigSourcesObject {\n    return {\n      hls: [],\n      dash: [],\n      progressive: [],\n      id: '',\n      duration: 0,\n      type: MediaEntry.Type.UNKNOWN,\n      poster: '',\n      dvr: false,\n      vr: null,\n      metadata: {\n        name: '',\n        description: '',\n        tags: ''\n      }\n    };\n  }\n\n  _getSourcesObject(mediaEntry: MediaEntry) {\n    const sourcesObject: ProviderMediaConfigSourcesObject = this._getDefaultSourcesObject();\n    const mediaSources = mediaEntry.sources.toJSON();\n    sourcesObject.hls = mediaSources.hls;\n    sourcesObject.dash = mediaSources.dash;\n    sourcesObject.progressive = mediaSources.progressive;\n    sourcesObject.id = mediaEntry.id;\n    sourcesObject.duration = mediaEntry.duration;\n    sourcesObject.type = mediaEntry.type;\n    sourcesObject.dvr = !!mediaEntry.dvrStatus;\n    sourcesObject.poster = mediaEntry.poster;\n    if (mediaEntry.sources.captions) {\n      sourcesObject.captions = mediaEntry.sources.captions;\n    }\n    if (mediaEntry.metadata && typeof mediaEntry.metadata.tags === 'string' && mediaEntry.metadata.tags.indexOf('360') > -1) {\n      sourcesObject.vr = {};\n    }\n    Object.assign(sourcesObject.metadata, mediaEntry.metadata);\n    return sourcesObject;\n  }\n}\n","// @flow\nimport OVPProvider from './provider';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__ + '-ovp';\nconst VERSION = __VERSION__;\n\nexport {OVPProvider as Provider, NAME, VERSION};\n"],"sourceRoot":""}