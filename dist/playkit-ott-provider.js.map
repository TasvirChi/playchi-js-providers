{"version":3,"sources":["./providers/webpack/universalModuleDefinition","./providers/webpack/bootstrap","./providers/./util/error/error.js","./providers/./util/error/severity.js","./providers/./util/error/category.js","./providers/./util/error/code.js","./providers/./entities/media-entry.js","./providers/./util/logger.js","./providers/./util/request-builder.js","./providers/./entities/media-format.js","./providers/./k-provider/common/base-service-result.js","./providers/./k-provider/common/response-types/kaltura-drm-playback-plugin-data.js","./providers/./entities/media-sources.js","./providers/./entities/media-source.js","./providers/./k-provider/common/data-loader-manager.js","./providers/./k-provider/common/multi-request-builder.js","./providers/./k-provider/common/response-types/kaltura-access-control-message.js","./providers/./entities/drm.js","./providers/./k-provider/common/base-provider.js","./providers/./util/clone.js","./providers/./entities/entry-list.js","./providers/./entities/bumper.js","./providers/./k-provider/ott/config.js","./providers/./k-provider/ott/services/ott-service.js","./providers/./k-provider/ott/loaders/data-loader-manager.js","./providers/./k-provider/ott/services/user-service.js","./providers/./k-provider/ott/loaders/session-loader.js","./providers/./k-provider/ott/services/asset-service.js","./providers/./k-provider/ott/response-types/kaltura-rule-action.js","./providers/./k-provider/ott/response-types/kaltura-playback-source.js","./providers/./k-provider/ott/response-types/kaltura-bumper-playback-plugin-data.js","./providers/./k-provider/ott/response-types/kaltura-playback-context.js","./providers/./k-provider/ott/response-types/kaltura-asset.js","./providers/./k-provider/ott/loaders/asset-loader.js","./providers/./k-provider/ott/loaders/asset-list-loader.js","./providers/./k-provider/ott/provider-parser.js","./providers/./k-provider/ott/provider.js","./providers/./k-provider/ott/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Error","severity","category","code","data","this","_logger","error","RECOVERABLE","CRITICAL","NETWORK","SERVICE","PROVIDER","UNSUPPORTED_SCHEME","BAD_HTTP_STATUS","HTTP_ERROR","TIMEOUT","MALFORMED_DATA_URI","BAD_SERVER_RESPONSE","MULTIREQUEST_API_ERROR","API_RESPONSE_MISMATCH","ERROR","BLOCK_ACTION","MEDIA_STATUS_NOT_READY","MISSING_MANDATORY_PARAMS","MISSING_PLAY_SOURCE","METHOD_NOT_IMPLEMENTED","getLogger","MediaEntry","metadata","Map","sources","MediaSources","type","Type","UNKNOWN","toJSON","id","duration","dvrStatus","status","poster","assetReferenceType","VOD","LIVE","IMAGE","AUDIO","ON","OFF","JsLogger","VERSION","DEBUG","INFO","TIME","TRACE","WARN","createDefaultHandler","debug","enabledFor","getLevel","info","log","setHandler","setLevel","time","timeEnd","trace","useDefaults","warn","LogLevel","setLogger","logger","getLogLevel","setLogLevel","level","RequestBuilder","headers","async","timeout","maxAttempts","getUrl","serviceUrl","service","action","doHttpRequest","promise","Promise","resolve","reject","_requestPromise","url","Severity","Category","Code","_createXHR","request","XMLHttpRequest","onreadystatechange","readyState","response","JSON","parse","responseText","responseHeaders","_getResponseHeaders","_createError","text","open","method","retryConfig","requestTime","performance","now","ontimeout","_handleError","statusText","onerror","onabort","forEach","setRequestHeader","send","params","getAllResponseHeaders","split","filter","header","toLowerCase","indexOf","_attemptCounter","assign","attempt","MediaFormat","DASH","mimeType","pathExt","HLS","WVM","MP4","MP3","SupportedStreamFormat","isProgressiveSource","formatName","sourceFormat","ServiceResult","objectType","hasError","ServiceError","message","KalturaDrmPlaybackPluginData","drm","scheme","licenseURL","certificate","WIDEVINE_CENC","PLAYREADY_CENC","FAIRPLAY","progressive","dash","hls","map","source","mediaFormat","push","h","MediaSource","mimetype","bandwidth","width","height","label","drmData","length","Array","isArray","DataLoaderManager","networkRetryConfig","_networkRetryConfig","add","loader","execution_loader","isValid","_loaders","set","startIndex","_multiRequest","requests","executionLoaderResponseMap","from","val","index","_loadersResponseMap","fetchData","execute","then","_multiResponse","prepareData","success","err","loaderDataIndexes","results","slice","MultiRequestBuilder","requestParams","serviceDef","stringify","FAILED_PARSING_REQUEST","multiRequestResult","MultiRequestResult","result","serviceResult","KalturaAccessControlMessage","Drm","licenseUrl","BaseProvider","options","playerVersion","_partnerId","partnerId","_widgetId","widgetId","_uiConfId","uiConfId","_isAnonymous","ks","_ks","_playerVersion","defaultWidgetId","getMediaConfig","mediaInfo","getPlaylistConfig","playlistInfo","getEntryListConfig","entryListInfo","_verifyHasSources","concat","messages","clone","node","e","keys","EntryList","items","Bumper","clickThroughUrl","defaultConfig","serviceParams","apiVersion","OTTConfiguration","clientConfig","OTTService","getMultiRequest","config","ottParams","multiReq","OTTDataLoaderManager","OTTUserService","anonymousLogin","udid","OTTSessionLoader","buildRequests","UserService","_requests","_response","OTTAssetService","getPlaybackContext","assetId","playbackContextOptions","contextDataParams","assetType","KalturaRuleAction","BLOCK","START_DATE_OFFSET","END_DATE_OFFSET","USER_BLOCK","ALLOW_PLAYBACK","BLOCK_PLAYBACK","APPLY_DISCOUNT_MODULE","KalturaPlaybackSource","format","adsPolicy","adsParam","fileId","protocols","hasDrmData","getProtocol","protocol","returnValue","KalturaBumpersPlaybackPluginData","streamertype","PROGRESSIVE","KalturaPlaybackContext","actions","plugins","plugin","hasBlockAction","undefined","getBlockAction","find","getErrorMessages","TRAILER","CATCHUP","START_OVER","PLAYBACK","KalturaAsset","description","metas","_formatTagsMetas","tags","pictures","images","objectToParse","parsed","objects","MEDIA","RECORDING","EPG","EPG_INTERNAL","EPG_EXTERNAL","NPVR","OTTAssetLoader","_entryId","entryId","playbackContext","mediaDataResult","playBackContextResult","OTTAssetListLoader","playlistItems","entries","_entries","entry","AssetReferenceType","item","MediaTypeCombinations","mediaAssetData","enableTrickPlay","DvrStatus","parseInt","externalIds","OTTProviderParser","getMediaEntry","assetResponse","requestData","mediaEntry","_fillBaseData","mediaAsset","kalturaSources","filteredKalturaSources","_filterSourcesByFormats","formats","_getParsedSources","typeData","_getMediaType","mediaType","contextType","Math","max","apply","getEntryList","playlistResponse","requestEntries","entryList","requestEntry","getBumper","progressiveBumper","bumper","StreamerType","metaData","reconstructMetadata","_getPoster","addToMetaObject","list","categoryObj","test","pic","includes","addAdaptiveSource","parsedSource","_parseAdaptiveSource","kalturaSource","mediaSource","playUrl","drmParams","Scheme","OTTProvider","env","networkRetryParameters","_dataLoader","mediaProtocol","assetFileIds","fileIds","context","streamerType","urlType","adapterData","_parseDataFromResponse","mediaConfig","session","isAnonymous","_getDefaultSourcesObject","has","sessionLoader","assetLoader","_getSourcesObject","_parseEntryListDataFromResponse","playlistConfig","playlistLoader","dvr","vr","sourcesObject","mediaSources","NAME","__NAME__","__VERSION__","ContextType","MediaType"],"mappings":"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","file":"playkit-ott-provider.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ott\"] = factory();\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"providers\"] = root[\"playkit\"][\"providers\"] || {}, root[\"playkit\"][\"providers\"][\"ott\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","//@flow\nimport getLogger from '../logger';\nimport {Severity} from './severity';\nimport type {SeverityType} from './severity';\nimport {Code} from './code';\nimport type {CodeType} from './code';\nimport {Category} from './category';\nimport type {CategoryType} from './category';\n\nconst CLASS_NAME: string = 'Error';\n\n/**\n * @classdesc This is a description of the error class.\n */\nexport default class Error {\n  severity: number;\n  category: number;\n  code: number;\n  data: any;\n  /**\n   * @enum {number}\n   */\n  static Severity: SeverityType = Severity;\n  /**\n   * @enum {number}\n   */\n  static Category: CategoryType = Category;\n  /**\n   * @enum {number}\n   */\n  static Code: CodeType = Code;\n  static _logger: any = getLogger(CLASS_NAME);\n\n  /**\n   * @constructor\n   * @param {number} severity - error's severity\n   * @param {number} category - error's category.\n   * @param {number} code - error's code.\n   * @param {any} data - additional data for the error.\n   */\n  constructor(severity: number, category: number, code: number, data: any = {}) {\n    this.severity = severity;\n    this.category = category;\n    this.code = code;\n    this.data = data;\n    Error._logger.error(`Category:${category} | Code:${code} |`, data);\n  }\n}\n","//@flow\n\ntype SeverityType = {[severity: string]: number};\n\nconst Severity: SeverityType = {\n  /**\n   * An error occurred, but the Player is attempting to recover from the error.\n   *\n   * If the Player cannot ultimately recover, it still may not throw a CRITICAL\n   * error.  For example, retrying for a media segment will never result in\n   * a CRITICAL error (the Player will just retry forever).\n   */\n  RECOVERABLE: 1,\n  /**\n   * A critical error that the library cannot recover from.  These usually cause\n   * the Player to stop loading or updating.  A new manifest must be loaded\n   * to reset the library.\n   */\n  CRITICAL: 2\n};\n\nexport {Severity};\nexport type {SeverityType};\n","//@flow\ntype CategoryType = {[category: string]: number};\n\nconst Category: CategoryType = {\n  /** Errors from the network stack. */\n  NETWORK: 1,\n  SERVICE: 2,\n  PROVIDER: 3\n};\n\nexport {Category};\nexport type {CategoryType};\n","//@flow\n\ntype CodeType = {[code: string]: number};\n\nconst Code: CodeType = {\n  /**\n   * A network request was made using an unsupported URI scheme.\n   */\n  UNSUPPORTED_SCHEME: 1000,\n\n  /**\n   * An HTTP network request returned an HTTP status that indicated a failure.\n   */\n  BAD_HTTP_STATUS: 1001,\n\n  /**\n   * An HTTP network request failed with an error, but not from the server.\n   */\n  HTTP_ERROR: 1002,\n\n  /**\n   * A network request timed out.\n   */\n  TIMEOUT: 1003,\n\n  /**\n   * A network request was made with a malformed data URI.\n   */\n  MALFORMED_DATA_URI: 1004,\n\n  /**\n   * The server responsded with 2xx response, but it couldn't be parsed\n   */\n  BAD_SERVER_RESPONSE: 1005,\n\n  /**\n   * The server response had a valid structure but contained an error from the API\n   */\n  MULTIREQUEST_API_ERROR: 1006,\n\n  /**\n   * The server response had a valid structure and valid API result, but it did not match the request\n   */\n  API_RESPONSE_MISMATCH: 1007,\n\n  /**\n   * The server responded with an error\n   */\n  ERROR: 2000,\n\n  /**\n   * The server responded with a block action\n   */\n  BLOCK_ACTION: 2001,\n\n  /**\n   * The server responded with status import or pre convert\n   */\n  MEDIA_STATUS_NOT_READY: 2002,\n\n  /**\n   * The provider is missing mandatory parameter/s\n   */\n\n  MISSING_MANDATORY_PARAMS: 3000,\n\n  /**\n   * The server responded with empty sources objects (for HLS, Dash and progressive)\n   */\n  MISSING_PLAY_SOURCE: 3001,\n\n  /**\n   * The provider doesn't implement the called api\n   */\n  METHOD_NOT_IMPLEMENTED: 3002\n};\n\nexport {Code};\nexport type {CodeType};\n","//@flow\nimport MediaSources from './media-sources';\n\nexport default class MediaEntry {\n  static Type: {[type: string]: string} = {\n    VOD: 'Vod',\n    LIVE: 'Live',\n    IMAGE: 'Image',\n    AUDIO: 'Audio',\n    UNKNOWN: 'Unknown'\n  };\n  static DvrStatus: {[type: string]: number} = {\n    ON: 1,\n    OFF: 0\n  };\n\n  /**\n   * @member - entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - entry name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - entry sources\n   * @type {MediaSources}\n   */\n  sources: MediaSources;\n  /**\n   * @member - entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - entry type\n   * @type {string}\n   */\n  type: string;\n  /**\n   * @member - entry metadata\n   * @type {Object}\n   */\n  metadata: Object;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - media status\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - media poster\n   * @type {string | Array<Object>}\n   */\n  poster: string | Array<Object>;\n\n  /**\n   * @member - assetReferenceType\n   * @type {string }\n   */\n  assetReferenceType: string;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.metadata = new Map();\n    this.sources = new MediaSources();\n    this.type = MediaEntry.Type.UNKNOWN;\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaEntryObject} - The json class object.\n   */\n  toJSON(): ProviderMediaEntryObject {\n    return {\n      id: this.id,\n      name: this.name,\n      sources: this.sources.toJSON(),\n      duration: this.duration,\n      dvrStatus: this.dvrStatus,\n      status: this.status,\n      metadata: this.metadata,\n      type: this.type,\n      poster: this.poster,\n      assetReferenceType: this.assetReferenceType\n    };\n  }\n}\n","//@flow\nexport type LogLevelObject = {value: number, name: string};\nexport type LogLevelType = {[level: string]: LogLevelObject};\nexport type loggerFunctionType = {\n  VERSION: String,\n  DEBUG: LogLevelObject,\n  ERROR: LogLevelObject,\n  INFO: LogLevelObject,\n  OFF: LogLevelObject,\n  TIME: LogLevelObject,\n  TRACE: LogLevelObject,\n  WARN: LogLevelObject,\n  createDefaultHandler: Function,\n  debug: Function,\n  enabledFor: Function,\n  error: Function,\n  get: Function,\n  getLevel: Function,\n  info: Function,\n  log: Function,\n  setHandler: Function,\n  setLevel: Function,\n  time: Function,\n  timeEnd: Function,\n  trace: Function,\n  useDefaults: Function,\n  warn: Function\n};\n\nexport type LoggerType = {\n  getLogger: loggerFunctionType,\n  LogLevel: LogLevelType\n};\n\nlet JsLogger = {\n  get: () => ({\n    VERSION: '',\n    DEBUG: {value: '', name: ''},\n    ERROR: {value: '', name: ''},\n    INFO: {value: '', name: ''},\n    OFF: {value: '', name: ''},\n    TIME: {value: '', name: ''},\n    TRACE: {value: '', name: ''},\n    WARN: {value: '', name: ''},\n    createDefaultHandler: () => {},\n    debug: () => {},\n    enabledFor: () => {},\n    error: () => {},\n    get: () => {},\n    getLevel: () => {},\n    info: () => {},\n    log: () => {},\n    setHandler: () => {},\n    setLevel: () => {},\n    time: () => {},\n    timeEnd: () => {},\n    trace: () => {},\n    useDefaults: () => {},\n    warn: () => {}\n  })\n};\n\nlet LogLevel: LogLevelType = {};\n/**\n * set logger\n * @param {LoggerType} logger - the logger\n * @returns {void}\n */\nfunction setLogger(logger: ?LoggerType): void {\n  if (logger && typeof logger.getLogger === 'function') {\n    JsLogger.get = logger.getLogger;\n  }\n  if (logger && logger.LogLevel) {\n    LogLevel = logger.LogLevel;\n  }\n}\n\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name?: string): Object {\n  //$FlowFixMe\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name?: string): LogLevelObject {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level: LogLevelObject, name?: string): void {\n  getLogger(name).setLevel(level);\n}\n\nexport default getLogger;\nexport {getLogLevel, setLogLevel, setLogger, LogLevel};\n","//@flow\nimport Error from './error/error';\n\nconst KALTURA_HEADER_PREFIX: string = 'x-';\n\nexport default class RequestBuilder {\n  /**\n   * @member - Service name\n   * @type {string}\n   */\n  service: string;\n  /**\n   * @member - Service action\n   * @type {string}\n   */\n  action: string;\n  /**\n   * @member - Service params\n   * @type {any}\n   */\n  params: any;\n  /**\n   * @memberof - Service headers\n   * @type {Map<string, string>}\n   */\n  headers: Map<string, string>;\n  /**\n   * @memberof - Service URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @memberof - Service method (POST,GET,DELETE etc..)\n   * @type {string}\n   */\n  method: string;\n  /**\n   * @memberof - Service tag\n   * @type {string}\n   */\n  tag: string;\n  /**\n   * @memberof - the response headers of the arra\n   * @type {Array<string>}\n   */\n  responseHeaders: Array<string>;\n  /**\n   * @description network retry configuration\n   * @memberof RequestBuilder\n   * @type {ProviderNetworkRetryParameters}\n   */\n  retryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  /**\n   * @description number of xhr attempts for the same multi - request.\n   * @memberof RequestBuilder\n   * @type {number}\n   * @private\n   */\n  _attemptCounter: number = 1;\n\n  /**\n   * @description hold the promise result of the XHR request(s) - if all tries fails, it rejects with the error.\n   * @memberof RequestBuilder\n   * @type {Object}\n   * @private\n   */\n  _requestPromise: Object;\n\n  /**\n   * @constructor\n   * @param {Map<string, string>} headers The request headers\n   */\n  constructor(headers: Map<string, string> = new Map()) {\n    this.headers = headers;\n  }\n\n  /**\n   * Builds restful service URL\n   * @function getUrl\n   * @param {string} serviceUrl - The service base URL\n   * @returns {string} The service URL\n   */\n  getUrl(serviceUrl: string): string {\n    return serviceUrl + '/service/' + this.service + (this.action ? '/action/' + this.action : '');\n  }\n\n  /**\n   * Executes service\n   * @function doHttpRequest\n   * @returns {Promise.<any>} Service response as promise\n   */\n  doHttpRequest(): Promise<any> {\n    const promise = new Promise((resolve, reject) => {\n      this._requestPromise = {\n        resolve,\n        reject\n      };\n    });\n    if (!this.url) {\n      this._requestPromise.reject(\n        new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MALFORMED_DATA_URI, {\n          url: this.url\n        })\n      );\n    }\n    this._createXHR();\n    return promise;\n  }\n\n  _createXHR(): void {\n    let request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          try {\n            const response = JSON.parse(request.responseText);\n            this.responseHeaders = this._getResponseHeaders(request);\n            // the promise returns the response for backwards compatibility\n            return this._requestPromise.resolve(response);\n          } catch (error) {\n            this._requestPromise.reject(\n              this._createError(request, Error.Code.BAD_SERVER_RESPONSE, {\n                text: request.responseText\n              })\n            );\n          }\n        }\n      }\n    };\n    request.open(this.method, this.url, this.retryConfig.async);\n    if (this.retryConfig.async && this.retryConfig.timeout) {\n      request.timeout = this.retryConfig.timeout;\n    }\n    const requestTime = performance.now();\n    request.ontimeout = () => {\n      this._handleError(request, Error.Code.TIMEOUT, {\n        timeout: (performance.now() - requestTime) / 1000,\n        statusText: request.statusText\n      });\n    };\n    request.onerror = request.onabort = () => {\n      this._handleError(request, Error.Code.HTTP_ERROR, {\n        text: request.responseText,\n        statusText: request.statusText\n      });\n    };\n    this.headers.forEach((value, key) => {\n      request.setRequestHeader(key, value);\n    });\n    request.send(this.params);\n  }\n\n  _getResponseHeaders(request: XMLHttpRequest): Array<string> {\n    return request\n      .getAllResponseHeaders()\n      .split('\\n')\n      .filter(header => header.toLowerCase().indexOf(KALTURA_HEADER_PREFIX) === 0);\n  }\n\n  _handleError(request: XMLHttpRequest, code: number, data: Object): Promise<*> | void {\n    const error = this._createError(request, code, data);\n    request.onreadystatechange = function () {};\n    request.onerror = function () {};\n    request.ontimeout = function () {};\n    request.onabort = function () {};\n    if (this.retryConfig.maxAttempts && this._attemptCounter < this.retryConfig.maxAttempts) {\n      this._attemptCounter++;\n      this._createXHR();\n    } else {\n      return this._requestPromise.reject(error);\n    }\n  }\n\n  _createError(request: XMLHttpRequest, code: number, data: Object): Error {\n    Object.assign(data, {\n      url: this.url,\n      headers: this._getResponseHeaders(request),\n      attempt: this._attemptCounter\n    });\n    return new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, code, data);\n  }\n}\n","//@flow\nexport const MediaFormat: {[name: string]: ProviderMediaFormatType} = {\n  DASH: {\n    name: 'dash',\n    mimeType: 'application/dash+xml',\n    pathExt: 'mpd'\n  },\n  HLS: {\n    name: 'hls',\n    mimeType: 'application/x-mpegURL',\n    pathExt: 'm3u8'\n  },\n  WVM: {\n    name: 'wvm',\n    mimeType: 'video/wvm',\n    pathExt: 'wvm'\n  },\n  MP4: {\n    name: 'mp4',\n    mimeType: 'video/mp4',\n    pathExt: 'mp4'\n  },\n  MP3: {\n    name: 'mp3',\n    mimeType: 'audio/mpeg',\n    pathExt: 'mp3'\n  }\n};\n\nexport const SupportedStreamFormat: Map<string, ProviderMediaFormatType> = new Map([\n  ['mpegdash', MediaFormat.DASH],\n  ['applehttp', MediaFormat.HLS],\n  ['url', MediaFormat.MP4]\n]);\n\n/**\n * returns a boolean whether a source is progressive or not\n * @param {string} formatName - the format name\n * @returns {boolean} - if source is progressive or not\n */\nfunction isProgressiveSource(formatName: string): boolean {\n  const sourceFormat = SupportedStreamFormat.get(formatName);\n  return !!sourceFormat && sourceFormat.name === MediaFormat.MP4.name;\n}\n\nexport {isProgressiveSource};\n","//@flow\nexport default class ServiceResult {\n  /**\n   * @member - Is service returned an error\n   * @type {boolean}\n   */\n  hasError: boolean = false;\n  /**\n   * @member - The service error\n   * @type {ServiceError}\n   */\n  error: ServiceError;\n  /**\n   * @member - The service result data\n   * @type {Object}\n   */\n  data: Object;\n\n  /**\n   * @constructor\n   * @param {Object} response - Service response\n   */\n  constructor(response: Object) {\n    if (response.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.code, response.message);\n    } else if (response.error && response.error.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.error.code, response.error.message);\n    } else {\n      this.data = response;\n    }\n  }\n}\n\nclass ServiceError {\n  /**\n   * @member - The error code\n   * @type {string}\n   */\n  code: string;\n  /**\n   * @member - The error message\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * @constructor\n   * @param {string} code - The result code\n   * @param {string} message - The result message\n   */\n  constructor(code: string, message: string) {\n    this.code = code;\n    this.message = message;\n  }\n}\n","//@flow\nexport default class KalturaDrmPlaybackPluginData {\n  static Scheme: {[scheme: string]: string} = {\n    'drm.PLAYREADY_CENC': 'com.microsoft.playready',\n    'drm.WIDEVINE_CENC': 'com.widevine.alpha',\n    'fairplay.FAIRPLAY': 'com.apple.fairplay',\n    WIDEVINE_CENC: 'com.widevine.alpha',\n    PLAYREADY_CENC: 'com.microsoft.playready',\n    FAIRPLAY: 'com.apple.fairplay'\n  };\n\n  /**\n   * @member - The drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - The license URL\n   * @type {string}\n   */\n  licenseURL: string;\n\n  /**\n   * @member - The drm certificate\n   * @type {?string}\n   */\n  certificate: ?string;\n\n  /**\n   * @constructor\n   * @param {Object} drm The json response\n   */\n  constructor(drm: any) {\n    this.scheme = drm.scheme;\n    this.licenseURL = drm.licenseURL;\n    this.certificate = drm.certificate;\n  }\n}\n","// @flow\nimport MediaSource from './media-source';\nimport {MediaFormat} from './media-format';\n\nexport default class MediaSources {\n  /**\n   * Progressive download media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  progressive: Array<MediaSource>;\n  /**\n   * Dash media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  dash: Array<MediaSource>;\n  /**\n   * Hls media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  hls: Array<MediaSource>;\n  captions: Array<PKExternalCaptionObject>;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.progressive = [];\n    this.dash = [];\n    this.hls = [];\n  }\n\n  /**\n   * Maps the source to one of the containers according to his media format.\n   * @param {MediaSource} source - The source to add to one of the containers.\n   * @param {MediaFormat} mediaFormat - The media format of the source.\n   * @returns {void}\n   */\n  map(source: MediaSource, mediaFormat: ?ProviderMediaFormatType) {\n    if (mediaFormat) {\n      switch (mediaFormat.name) {\n        case MediaFormat.MP4.name:\n          this.progressive.push(source);\n          break;\n        case MediaFormat.DASH.name:\n          this.dash.push(source);\n          break;\n        case MediaFormat.HLS.name:\n          this.hls.push(source);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourcesObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourcesObject {\n    const response: ProviderMediaSourcesObject = {\n      progressive: [],\n      dash: [],\n      hls: []\n    };\n    this.progressive.forEach(p => response.progressive.push(p.toJSON()));\n    this.hls.forEach(h => response.hls.push(h.toJSON()));\n    this.dash.forEach(d => response.dash.push(d.toJSON()));\n    return response;\n  }\n}\n","//@flow\nimport Drm from './drm';\n\nexport default class MediaSource {\n  /**\n   * @member - media source id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - media source url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - media source mimetype\n   * @type {string}\n   */\n  mimetype: string;\n  /**\n   * @member - media source drm data\n   * @type {Array<Drm>}\n   */\n  drmData: Array<Drm>;\n  /**\n   * @member - media source bandwidth\n   * @type {number}\n   */\n  bandwidth: number;\n  /**\n   * @member - media source width\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - media source height\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - media source label\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourceObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourceObject {\n    const response: ProviderMediaSourceObject = {\n      id: this.id,\n      url: this.url,\n      mimetype: this.mimetype\n    };\n    if (this.bandwidth) response.bandwidth = this.bandwidth;\n    if (this.width) response.width = this.width;\n    if (this.height) response.height = this.height;\n    if (this.label) response.label = this.label;\n    if (this.drmData && this.drmData.length > 0) {\n      response.drmData = [];\n      this.drmData.forEach(d => {\n        if (Array.isArray(response.drmData)) {\n          response.drmData.push(d.toJSON());\n        }\n      });\n    }\n    return response;\n  }\n}\n","// @flow\nimport MultiRequestBuilder, {MultiRequestResult} from './multi-request-builder';\nimport Error from '../../util/error/error';\n\nexport default class DataLoaderManager {\n  /**\n   * @member - Loaders response map index\n   * @type {Map<string,Array<number>>}\n   * @private\n   */\n  _loadersResponseMap: Map<string, Array<number>> = new Map();\n  /**\n   * @member - Loaders multi request\n   * @type {MultiRequestBuilder}\n   * @protected\n   */\n  _multiRequest: MultiRequestBuilder;\n  /**\n   * @member - Loaders multi response\n   * @type {MultiRequestResult}\n   * @private\n   */\n  _multiResponse: MultiRequestResult;\n  /**\n   * @member - Loaders to execute\n   * @type {Map<string,Function>}\n   * @private\n   */\n  _loaders: Map<string, ILoader> = new Map();\n\n  _networkRetryConfig: ProviderNetworkRetryParameters;\n\n  constructor(networkRetryConfig: ProviderNetworkRetryParameters) {\n    this._networkRetryConfig = networkRetryConfig;\n  }\n\n  /**\n   * Add loader to execution loaders map\n   * @function\n   * @param {Function} loader Loader to add\n   * @param {Object} params Loader params\n   * @returns {void}\n   */\n  add(loader: Function, params: Object): void {\n    let execution_loader = new loader(params);\n    if (execution_loader.isValid()) {\n      this._loaders.set(loader.id, execution_loader);\n      // Get the start index from the multiReqeust before adding current execution_loader requests\n      let startIndex = this._multiRequest.requests.length;\n      // Get the requests\n      let requests = execution_loader.requests;\n      this._multiRequest.retryConfig = this._networkRetryConfig;\n      // Add requests to muktiRequest queue\n      requests.forEach(request => {\n        this._multiRequest.add(request);\n      });\n      // Create range array of current execution_loader requests\n      let executionLoaderResponseMap = Array.from(new Array(requests.length), (val, index) => index + startIndex);\n      // Add to map\n      this._loadersResponseMap.set(loader.id, executionLoaderResponseMap);\n    }\n  }\n\n  /**\n   * Get data from all loaders using multi request\n   * @function\n   * @returns {Promise} Promise\n   */\n  fetchData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._multiRequest.execute().then(\n        data => {\n          this._multiResponse = data.response;\n          let preparedData: Object = this.prepareData(data.response);\n          if (preparedData.success) {\n            resolve(this._loaders);\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.API_RESPONSE_MISMATCH, {\n                headers: data.headers\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n\n  /**\n   * Prepare fetched data\n   * @function\n   * @param {MultiRequestResult} response - The multi request result\n   * @returns {Object} - The prepared data\n   */\n  prepareData(response: MultiRequestResult): Object {\n    this._loaders.forEach((loader, name) => {\n      let loaderDataIndexes = this._loadersResponseMap.get(name);\n      try {\n        if (loaderDataIndexes && loaderDataIndexes.length > 0) {\n          loader.response = response.results.slice(loaderDataIndexes[0], loaderDataIndexes[loaderDataIndexes.length - 1] + 1);\n        }\n      } catch (err) {\n        return {success: false, error: err};\n      }\n    });\n    return {success: true, data: this._loaders};\n  }\n}\n","//@flow\nimport RequestBuilder from '../../util/request-builder';\nimport getLogger from '../../util/logger';\nimport ServiceResult from './base-service-result';\nimport Error from '../../util/error/error';\n\nexport default class MultiRequestBuilder extends RequestBuilder {\n  static _logger = getLogger('MultiRequestBuilder');\n  /**\n   * @memberof - MultiRequestBuilder\n   * @type {Array<RequestBuilder>}\n   */\n  requests: Array<RequestBuilder> = [];\n  /**\n   * Adds request to requests array\n   * @function add\n   * @param {RequestBuilder} request The request\n   * @returns {MultiRequestBuilder} The multiRequest\n   */\n  add(request: RequestBuilder): MultiRequestBuilder {\n    this.requests.push(request);\n    const requestParams = {};\n    const serviceDef: Object = {service: request.service, action: request.action};\n    Object.assign(requestParams, {[this.requests.length]: Object.assign(serviceDef, request.params)});\n    Object.assign(requestParams, this.params);\n    this.params = requestParams;\n    return this;\n  }\n\n  /**\n   * Executes a multi request\n   * @function execute\n   * @returns {Promise} The multirequest execution promise\n   */\n  execute(): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.params = JSON.stringify(this.params);\n      } catch (err) {\n        MultiRequestBuilder._logger.error(`${err.message}`);\n        reject(\n          new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.FAILED_PARSING_REQUEST, {\n            error: err,\n            params: this.params\n          })\n        );\n      }\n      this.doHttpRequest().then(\n        data => {\n          const multiRequestResult = new MultiRequestResult(data);\n          if (multiRequestResult.success) {\n            resolve({\n              headers: this.responseHeaders,\n              response: multiRequestResult\n            });\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MULTIREQUEST_API_ERROR, {\n                url: this.url,\n                headers: this.responseHeaders,\n                results: multiRequestResult.results\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n}\n\nexport class MultiRequestResult {\n  static _logger = getLogger('MultiRequestResult');\n  /**\n   * @memberof MultiRequestResult\n   * @type {boolean}\n   */\n  success: boolean;\n  /**\n   * @memberof MultiRequestResult\n   * @type {Object}\n   */\n  results: Array<ServiceResult> = [];\n  /**\n   * @constructor\n   * @param {Object} response data\n   */\n  constructor(response: Object) {\n    this.success = true;\n    const responseArr = response.result ? response.result : response;\n    responseArr.forEach(result => {\n      const serviceResult: ServiceResult = new ServiceResult(result);\n      this.results.push(serviceResult);\n      if (serviceResult.hasError) {\n        MultiRequestResult._logger.error(\n          `Service returned an error with error code: ${serviceResult.error.code} and message: ${serviceResult.error.message}.`\n        );\n        this.success = false;\n        return;\n      }\n    });\n  }\n}\n","//@flow\nexport default class KalturaAccessControlMessage {\n  /**\n   * @member - The access control message\n   * @type {string}\n   */\n  message: string;\n  /**\n   *  @member - The access control message code\n   * @@type {string}\n   */\n  code: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: Object) {\n    this.message = data.message;\n    this.code = data.code;\n  }\n}\n","//@flow\nexport default class Drm {\n  /**\n   * @member - license url\n   * @type {string}\n   */\n  licenseUrl: string;\n  /**\n   * @member - drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - drm certificate\n   * @type {string}\n   */\n  certificate: string;\n\n  /**\n   * @constructor\n   * @param {string} licenseUrl - the license url\n   * @param {string} scheme - the drm scheme\n   * @param {?string} certificate - the drm certificate\n   */\n  constructor(licenseUrl: string, scheme: string, certificate: ?string) {\n    this.licenseUrl = licenseUrl;\n    this.scheme = scheme;\n    if (certificate) {\n      this.certificate = certificate;\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderDrmDataObject} - The json class object.\n   */\n  toJSON(): ProviderDrmDataObject {\n    const response: ProviderDrmDataObject = {\n      licenseUrl: this.licenseUrl,\n      scheme: this.scheme\n    };\n    if (this.certificate) response.certificate = this.certificate;\n    return response;\n  }\n}\n","// @flow\nimport {getLogLevel, setLogLevel, setLogger, type LogLevelType, LogLevel} from '../../util/logger';\nimport DataLoaderManager from './data-loader-manager';\nimport Error from '../../util/error/error';\n\nexport default class BaseProvider<MI> {\n  _partnerId: number;\n  _widgetId: ?string;\n  _ks: string;\n  _uiConfId: ?number;\n  _dataLoader: DataLoaderManager;\n  _playerVersion: string;\n  _logger: any;\n  _isAnonymous: boolean;\n  _networkRetryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  get partnerId(): number {\n    return this._partnerId;\n  }\n\n  get widgetId(): string {\n    return this._widgetId || this.defaultWidgetId;\n  }\n\n  get defaultWidgetId(): string {\n    return '_' + this._partnerId;\n  }\n\n  get uiConfId(): ?number {\n    return this._uiConfId;\n  }\n\n  get ks(): string {\n    return this._ks;\n  }\n\n  set ks(value: string): void {\n    this._ks = value;\n  }\n\n  get playerVersion(): string {\n    return this._playerVersion;\n  }\n\n  get isAnonymous(): boolean {\n    return this._isAnonymous;\n  }\n\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    setLogger(options.logger);\n    this._partnerId = options.partnerId;\n    this._widgetId = options.widgetId;\n    this._uiConfId = options.uiConfId;\n    this._isAnonymous = !options.ks;\n    this._ks = options.ks || '';\n    this._playerVersion = playerVersion;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getMediaConfig(mediaInfo: MI): Promise<ProviderMediaConfigObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'getMediaConfig method must be implement by the derived class'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading playlist by id'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading entry list'\n      })\n    );\n  }\n\n  _verifyHasSources(sources: ProviderMediaConfigSourcesObject) {\n    if (sources.hls.concat(sources.dash, sources.progressive).length === 0) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MISSING_PLAY_SOURCE, {\n        action: '',\n        messages: `No play source for entry id: ${sources.id}`\n      });\n    }\n  }\n\n  get LogLevel(): LogLevelType {\n    return LogLevel;\n  }\n\n  getLogLevel(name?: string): Object {\n    return getLogLevel(name);\n  }\n\n  setLogLevel(level: Object, name?: string): void {\n    setLogLevel(level, name);\n  }\n}\n","const clone = data => {\n  let node;\n  if (Array.isArray(data)) {\n    node = data.length > 0 ? data.slice(0) : [];\n    node.forEach((e, i) => {\n      if ((typeof e === 'object' && e !== {}) || (Array.isArray(e) && e.length > 0)) {\n        node[i] = clone(e);\n      }\n    });\n  } else if (typeof data === 'object') {\n    node = Object.assign({}, data);\n    Object.keys(node).forEach(key => {\n      if ((typeof node[key] === 'object' && node[key] !== {}) || (Array.isArray(node[key]) && node[key].length > 0)) {\n        node[key] = clone(node[key]);\n      }\n    });\n  } else {\n    node = data;\n  }\n  return node;\n};\n\nexport {clone};\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class EntryList {\n  /**\n   * @member - entry list items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","//@flow\n\nexport default class Bumper {\n  /**\n   * @member - bumper url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - bumper click through url\n   * @type {string}\n   */\n  clickThroughUrl: string;\n\n  /**\n   * @constructor\n   * @param {Object} data - The bumper response\n   */\n  constructor(data: Object) {\n    this.url = data.url;\n    this.clickThroughUrl = data.clickThroughUrl;\n  }\n}\n","//@flow\nimport {clone} from '../../util/clone';\n\nconst defaultConfig: Object = {\n  serviceParams: {\n    apiVersion: '5.2.6'\n  }\n};\n\nexport default class OTTConfiguration {\n  static set(clientConfig?: ProviderEnvConfigObject) {\n    if (clientConfig) {\n      Object.assign(defaultConfig, clientConfig);\n    }\n  }\n\n  static get(): Object {\n    return clone(defaultConfig);\n  }\n}\n\nexport {OTTConfiguration};\n","//@flow\nimport MultiRequestBuilder from '../../common/multi-request-builder';\nimport OTTConfiguration from '../config';\n\nconst SERVICE_NAME: string = 'multirequest';\n\nexport default class OTTService {\n  /**\n   * Gets a new instance of MultiRequestBuilder with ott params\n   * @function getMultiRequest\n   * @param {string} ks The ks\n   * @param {string} partnerId The partner ID\n   * @returns {MultiRequestBuilder} The multi request builder\n   * @static\n   */\n  static getMultiRequest(ks: string, partnerId?: number): MultiRequestBuilder {\n    const config = OTTConfiguration.get();\n    const ottParams = config.serviceParams;\n    if (ks) {\n      Object.assign(ottParams, {ks: ks});\n    }\n    if (partnerId) {\n      Object.assign(ottParams, {partnerId: partnerId});\n    }\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const multiReq = new MultiRequestBuilder(headers);\n    multiReq.method = 'POST';\n    multiReq.service = SERVICE_NAME;\n    multiReq.url = multiReq.getUrl(config.serviceUrl);\n    multiReq.params = ottParams;\n    return multiReq;\n  }\n}\n","// @flow\nimport DataLoaderManager from '../../common/data-loader-manager';\nimport OTTService from '../services/ott-service';\n/**\n * OTTDataLoaderManager is a class that handles the OTT data loading\n * @param {string} partnerId - partner id\n * @param {string} ks - ks\n * @param {ProviderNetworkRetryParameters} [networkRetryConfig] - network retry configuration\n */\nexport default class OTTDataLoaderManager extends DataLoaderManager {\n  constructor(partnerId: number, ks: string = '', networkRetryConfig: ProviderNetworkRetryParameters) {\n    super(networkRetryConfig);\n    this._multiRequest = OTTService.getMultiRequest(ks, partnerId);\n  }\n}\n","//@flow\nimport OTTService from './ott-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'ottuser';\n\nexport default class OTTUserService extends OTTService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} partnerId The partner ID\n   * @param {string} udid The udid\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static anonymousLogin(serviceUrl: string, partnerId: number, udid?: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'anonymousLogin';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    const params: Object = {partnerId: partnerId};\n    if (udid) {\n      Object.assign(params, {udid: udid});\n    }\n    request.params = params;\n    return request;\n  }\n}\n","//@flow\nimport UserService from '../services/user-service';\nimport OTTConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\n\nexport default class OTTSessionLoader implements ILoader {\n  _partnerId: number;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'session';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._partnerId = params.partnerId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.ks = response[0].data.ks;\n  }\n\n  get response(): any {\n    return this._response.ks;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(UserService.anonymousLogin(config.serviceUrl, params.partnerId, params.udid));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._partnerId;\n  }\n}\n","//@flow\nimport OTTService from './ott-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'asset';\n\nexport default class OTTAssetService extends OTTService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The partner ID\n   * @param {string} assetId The asset ID\n   * @param {string} type The asset type (media/recording/epg)\n   * @param {ProviderPlaybackContextOptions} playbackContextOptions The playbackContextOptions\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static getPlaybackContext(\n    serviceUrl: string,\n    ks: string,\n    assetId: string,\n    type: string,\n    playbackContextOptions: ProviderPlaybackContextOptions\n  ): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'getPlaybackContext';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    const contextDataParams: Object = {objectType: 'KalturaPlaybackContextOptions'};\n    Object.assign(contextDataParams, playbackContextOptions);\n    request.params = {assetId: assetId, assetType: type, contextDataParams: contextDataParams, ks: ks};\n    return request;\n  }\n\n  static get(serviceUrl: string, ks: string, assetId: string, assetReferenceType: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'get';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.params = {id: assetId, assetReferenceType: assetReferenceType, ks: ks};\n    return request;\n  }\n}\n","//@flow\nexport default class KalturaRuleAction {\n  static Type: {[type: string]: string | number} = {\n    BLOCK: 'BLOCK',\n    START_DATE_OFFSET: 'START_DATE_OFFSET',\n    END_DATE_OFFSET: 'END_DATE_OFFSET',\n    USER_BLOCK: 'USER_BLOCK',\n    ALLOW_PLAYBACK: 'ALLOW_PLAYBACK',\n    BLOCK_PLAYBACK: 'BLOCK_PLAYBACK',\n    APPLY_DISCOUNT_MODULE: 'APPLY_DISCOUNT_MODULE'\n  };\n\n  /**\n   * @member - The type of the action\n   * @type {string|number}\n   */\n  type: string | number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.type = data.type;\n  }\n}\n","//@flow\nimport KalturaDrmPlaybackPluginData from '../../common/response-types/kaltura-drm-playback-plugin-data';\n\nexport type OTTKalturaPlaybackSource = KalturaPlaybackSource;\n\nexport default class KalturaPlaybackSource {\n  format: string;\n  protocols: string;\n  drm: Array<KalturaDrmPlaybackPluginData> = [];\n  adsPolicy: string;\n  adsParam: string;\n  duration: number;\n  url: string;\n  type: string;\n  fileId: number;\n\n  /**\n   * @constructor\n   * @param {Object} source The response\n   */\n  constructor(source: Object) {\n    this.format = source.format;\n    this.adsPolicy = source.adsPolicy;\n    this.adsParam = source.adsParam;\n    this.duration = source.duration;\n    this.url = source.url;\n    this.type = source.type;\n    this.fileId = source.id;\n    this.protocols = source.protocols;\n    if (source.drm) {\n      source.drm.map(drm => this.drm.push(new KalturaDrmPlaybackPluginData(drm)));\n    }\n  }\n\n  /**\n   * Checks if source has DRM data\n   * @function hasDrmData\n   * @returns {boolean} Is source has DRM\n   */\n  hasDrmData(): boolean {\n    return this.drm && this.drm.length > 0;\n  }\n\n  /**\n   * Returns source desired protocol if supported\n   * @param {string} protocol - the desired protocol for the source (base play url protocol)\n   * @returns {string} - protocol if protocol is in the protocols list - if not empty string returned\n   */\n  getProtocol(protocol: string): string {\n    let returnValue: string = '';\n    if (this.protocols && this.protocols.length > 0) {\n      let protocolsArr: Array<string> = this.protocols.split(',');\n      protocolsArr.forEach(p => {\n        if (p === protocol) {\n          returnValue = p;\n        }\n      });\n    } else if (protocol === 'http') {\n      return protocol;\n    }\n    return returnValue;\n  }\n}\n","//@flow\nexport default class KalturaBumpersPlaybackPluginData {\n  static StreamerType: {[type: string]: string} = {\n    HLS: 'hls',\n    DASH: 'dash',\n    PROGRESSIVE: 'progressive'\n  };\n\n  /**\n   * @member - The streamer type\n   * @type {string}\n   */\n  streamertype: string;\n  /**\n   * @member - The url\n   * @type {string}\n   */\n  url: string;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.streamertype = data.streamertype;\n    this.url = data.url;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaAccessControlMessage from '../../common/response-types/kaltura-access-control-message';\nimport KalturaRuleAction from './kaltura-rule-action';\nimport KalturaPlaybackSource from './kaltura-playback-source';\nimport KalturaBumpersPlaybackPluginData from './kaltura-bumper-playback-plugin-data';\n\nexport default class KalturaPlaybackContext extends ServiceResult {\n  static Type: {[type: string]: string} = {\n    TRAILER: 'TRAILER',\n    CATCHUP: 'CATCHUP',\n    START_OVER: 'START_OVER',\n    PLAYBACK: 'PLAYBACK'\n  };\n  /**\n   * @member - The playback sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaRuleAction>}\n   */\n  actions: Array<KalturaRuleAction> = [];\n  /**\n   * @member - Array of access control massages\n   * @type {Array<KalturaAccessControlMessage>}\n   */\n  messages: Array<KalturaAccessControlMessage> = [];\n  /**\n   * @member - Array of bumper plugins\n   * @type {Array<KalturaBumpersPlaybackPluginData>}\n   */\n  plugins: Array<KalturaBumpersPlaybackPluginData> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      const messages = response.messages;\n      if (messages) {\n        messages.map(message => this.messages.push(new KalturaAccessControlMessage(message)));\n      }\n      const actions = response.actions;\n      if (actions) {\n        actions.map(action => this.actions.push(new KalturaRuleAction(action)));\n      }\n      const sources = response.sources;\n      if (sources) {\n        sources.map(source => this.sources.push(new KalturaPlaybackSource(source)));\n      }\n      const plugins = response.plugins;\n      if (plugins) {\n        plugins.map(plugin => this.plugins.push(new KalturaBumpersPlaybackPluginData(plugin)));\n      }\n    }\n  }\n\n  hasBlockAction(): boolean {\n    return this.getBlockAction() !== undefined;\n  }\n\n  getBlockAction(): ?KalturaRuleAction {\n    return this.actions.find(action => action.type === KalturaRuleAction.Type.BLOCK);\n  }\n\n  getErrorMessages(): Array<KalturaAccessControlMessage> {\n    return this.messages;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\n\nexport default class KalturaAsset extends ServiceResult {\n  static Type: {[type: string]: string} = {\n    MEDIA: 'media',\n    RECORDING: 'recording',\n    EPG: 'epg'\n  };\n\n  static AssetReferenceType: {[type: string]: string} = {\n    MEDIA: 'media',\n    EPG_INTERNAL: 'epg_internal',\n    EPG_EXTERNAL: 'epg_external',\n    NPVR: 'nPVR'\n  };\n  /**\n   * @member - The asset id\n   * @type {number}\n   */\n  id: number;\n  /**\n   * @member - The asset name\n   * @type {string}\n   */\n  name: string = '';\n  /**\n   * @member - The asset name description\n   * @type {string}\n   */\n  description: string = '';\n  /**\n   * @member - The asset tags\n   * @type {Array<Object>}\n   */\n  tags: Array<Object> = [];\n  /**\n   * @member - The asset metas\n   * @type {Array<Object>}\n   */\n  metas: Array<Object> = [];\n  /**\n   * @member - The asset images\n   * @type {Array<any>}\n   */\n  pictures: Array<any> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      this.id = response.id;\n      this.name = response.name;\n      this.description = response.description;\n      this.metas = this._formatTagsMetas(response.metas);\n      this.tags = this._formatTagsMetas(response.tags);\n      this.pictures = response.images;\n    }\n  }\n\n  _formatTagsMetas(objectToParse: any): Array<Object> {\n    const parsed = [];\n    Object.keys(objectToParse).forEach(function (key) {\n      if (objectToParse[key].objects) {\n        let value = '';\n        objectToParse[key].objects.forEach(function (object) {\n          value += object.value + '|';\n        });\n        parsed.push({key: key, value: value});\n      } else {\n        parsed.push({key: key, value: objectToParse[key].value});\n      }\n    });\n    return parsed;\n  }\n}\n","//@flow\nimport OTTAssetService from '../services/asset-service';\nimport OTTConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\nimport KalturaPlaybackContext from '../response-types/kaltura-playback-context';\nimport KalturaAsset from '../response-types/kaltura-asset';\n\ntype OTTAssetLoaderResponse = {mediaDataResult: KalturaAsset, playBackContextResult: KalturaPlaybackContext};\nexport type {OTTAssetLoaderResponse};\n\nexport default class OTTAssetLoader implements ILoader {\n  _entryId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'asset';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entryId = params.entryId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.mediaDataResult = new KalturaAsset(response[0].data);\n    this._response.playBackContextResult = new KalturaPlaybackContext(response[1].data);\n  }\n\n  get response(): OTTAssetLoaderResponse {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OTTAssetService.get(config.serviceUrl, params.ks, params.entryId, params.assetReferenceType));\n    requests.push(OTTAssetService.getPlaybackContext(config.serviceUrl, params.ks, params.entryId, params.type, params.playbackContext));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._entryId;\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OTTConfiguration from '../config';\nimport OTTAssetService from '../services/asset-service';\nimport KalturaAsset from '../response-types/kaltura-asset';\n\nexport default class OTTAssetListLoader implements ILoader {\n  _entries: Array<string>;\n  _requests: Array<RequestBuilder>;\n  _response: any = {playlistItems: {entries: []}};\n\n  static get id(): string {\n    return 'asset_list';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entries = params.entries;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    response.forEach(item => {\n      this._response.playlistItems.entries.push({mediaDataResult: new KalturaAsset(item.data)});\n    });\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    params.entries.forEach(entry => {\n      const assetReferenceType = entry.assetReferenceType || KalturaAsset.AssetReferenceType.MEDIA;\n      requests.push(OTTAssetService.get(config.serviceUrl, params.ks, entry.entryId || entry, assetReferenceType));\n    });\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entries && this._entries.length);\n  }\n}\n","//@flow\nimport getLogger from '../../util/logger';\nimport KalturaPlaybackSource from './response-types/kaltura-playback-source';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaAsset from './response-types/kaltura-asset';\nimport MediaEntry from '../../entities/media-entry';\nimport Drm from '../../entities/drm';\nimport MediaSource from '../../entities/media-source';\nimport MediaSources from '../../entities/media-sources';\nimport EntryList from '../../entities/entry-list';\nimport Bumper from '../../entities/bumper';\nimport {SupportedStreamFormat, isProgressiveSource} from '../../entities/media-format';\nimport KalturaDrmPlaybackPluginData from '../common/response-types/kaltura-drm-playback-plugin-data';\nimport KalturaRuleAction from './response-types/kaltura-rule-action';\nimport KalturaAccessControlMessage from '../common/response-types/kaltura-access-control-message';\nimport type {OTTAssetLoaderResponse} from './loaders/asset-loader';\nimport KalturaBumpersPlaybackPluginData from './response-types/kaltura-bumper-playback-plugin-data';\n\nconst LIVE_ASST_OBJECT_TYPE: string = 'KalturaLiveAsset';\n\nconst MediaTypeCombinations: {[mediaType: string]: Object} = {\n  [KalturaAsset.Type.MEDIA]: {\n    [KalturaPlaybackContext.Type.TRAILER]: () => ({type: MediaEntry.Type.VOD}),\n    [KalturaPlaybackContext.Type.PLAYBACK]: mediaAssetData => {\n      if (mediaAssetData.objectType === LIVE_ASST_OBJECT_TYPE) {\n        return {type: MediaEntry.Type.LIVE, dvrStatus: mediaAssetData.enableTrickPlay ? MediaEntry.DvrStatus.ON : MediaEntry.DvrStatus.OFF};\n      } else if (parseInt(mediaAssetData.externalIds) > 0) {\n        return {type: MediaEntry.Type.LIVE, dvrStatus: MediaEntry.DvrStatus.OFF};\n      }\n      return {type: MediaEntry.Type.VOD};\n    }\n  },\n  [KalturaAsset.Type.EPG]: {\n    [KalturaPlaybackContext.Type.CATCHUP]: () => ({type: MediaEntry.Type.VOD}),\n    [KalturaPlaybackContext.Type.START_OVER]: () => ({type: MediaEntry.Type.LIVE, dvrStatus: MediaEntry.DvrStatus.ON})\n  },\n  [KalturaAsset.Type.RECORDING]: {\n    [KalturaPlaybackContext.Type.PLAYBACK]: () => ({type: MediaEntry.Type.VOD})\n  }\n};\n\nexport default class OTTProviderParser {\n  static _logger = getLogger('OTTProviderParser');\n\n  /**\n   * Returns parsed media entry by given OTT response objects.\n   * @function getMediaEntry\n   * @param {any} assetResponse - The asset response.\n   * @param {Object} requestData - The request data object.\n   * @returns {MediaEntry} - The media entry\n   * @static\n   * @public\n   */\n  static getMediaEntry(assetResponse: any, requestData: Object): MediaEntry {\n    const mediaEntry = new MediaEntry();\n    OTTProviderParser._fillBaseData(mediaEntry, assetResponse, requestData);\n    const playbackContext = assetResponse.playBackContextResult;\n    const mediaAsset = assetResponse.mediaDataResult;\n    const kalturaSources = playbackContext.sources;\n    const filteredKalturaSources = OTTProviderParser._filterSourcesByFormats(kalturaSources, requestData.formats);\n    mediaEntry.sources = OTTProviderParser._getParsedSources(filteredKalturaSources);\n    const typeData = OTTProviderParser._getMediaType(mediaAsset.data, requestData.mediaType, requestData.contextType);\n    mediaEntry.type = typeData.type;\n    mediaEntry.dvrStatus = typeData.dvrStatus;\n    mediaEntry.duration = Math.max.apply(\n      Math,\n      kalturaSources.map(source => source.duration)\n    );\n    return mediaEntry;\n  }\n\n  /**\n   * Returns parsed entry list by given OTT response objects\n   * @function getEntryList\n   * @param {any} playlistResponse - response\n   * @param {Array<ProviderMediaInfoObject>} requestEntries - entries list\n   * @returns {Playlist} - The entry list\n   * @static\n   * @public\n   */\n  static getEntryList(playlistResponse: any, requestEntries: Array<ProviderMediaInfoObject>): EntryList {\n    const entryList = new EntryList();\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlistItems.forEach(entry => {\n      const mediaEntry = new MediaEntry();\n      const requestData = requestEntries.find(requestEntry => requestEntry.entryId === entry.mediaDataResult.id);\n      OTTProviderParser._fillBaseData(mediaEntry, entry, requestData);\n      entryList.items.push(mediaEntry);\n    });\n    return entryList;\n  }\n\n  /**\n   * Returns parsed bumper by given OTT response objects.\n   * @function getBumper\n   * @param {any} assetResponse - The asset response.\n   * @returns {?Bumper} - The bumper\n   * @static\n   * @public\n   */\n  static getBumper(assetResponse: any): ?Bumper {\n    const playbackContext = assetResponse.playBackContextResult;\n    const progressiveBumper = playbackContext.plugins.find(\n      bumper => bumper.streamertype === KalturaBumpersPlaybackPluginData.StreamerType.PROGRESSIVE\n    );\n    if (progressiveBumper) {\n      return new Bumper(progressiveBumper);\n    }\n  }\n\n  static _fillBaseData(mediaEntry: MediaEntry, assetResponse: any, requestData: any) {\n    const mediaAsset = assetResponse.mediaDataResult;\n    const metaData = OTTProviderParser.reconstructMetadata(mediaAsset);\n    metaData.description = mediaAsset.description;\n    metaData.name = mediaAsset.name;\n    if (requestData && requestData.mediaType) metaData.mediaType = requestData.mediaType;\n    mediaEntry.metadata = metaData;\n    mediaEntry.poster = OTTProviderParser._getPoster(mediaAsset.pictures);\n    mediaEntry.id = mediaAsset.id;\n    return mediaEntry;\n  }\n\n  /**\n   * reconstruct the metadata\n   * @param {Object} mediaAsset the mediaAsset that contains the response with the metadata.\n   * @returns {Object} reconstructed metadata object\n   */\n  static reconstructMetadata(mediaAsset: Object): Object {\n    const metadata = {\n      metas: OTTProviderParser.addToMetaObject(mediaAsset.metas),\n      tags: OTTProviderParser.addToMetaObject(mediaAsset.tags)\n    };\n    return metadata;\n  }\n\n  /**\n   * transform an array of [{key: value},{key: value}...] to an object\n   * @param {Array<Object>} list a list of objects\n   * @returns {Object} an mapped object of the arrayed list.\n   */\n  static addToMetaObject(list: Array<Object>): Object {\n    let categoryObj = {};\n    if (list) {\n      list.forEach(item => {\n        categoryObj[item.key] = item.value;\n      });\n    }\n    return categoryObj;\n  }\n\n  /**\n   * Gets the poster url without width and height.\n   * @param {Array<Object>} pictures - Media pictures.\n   * @returns {string | Array<Object>} - Poster base url or array of poster candidates.\n   * @private\n   */\n  static _getPoster(pictures: Array<Object>): string | Array<Object> {\n    if (pictures && pictures.length > 0) {\n      const picObj = pictures[0];\n      const url = picObj.url;\n      // Search for thumbnail service\n      const regex = /.*\\/thumbnail\\/.*(?:width|height)\\/\\d+\\/(?:height|width)\\/\\d+/;\n      if (regex.test(url)) {\n        return url;\n      }\n      return pictures.map(pic => ({url: pic.url, width: pic.width, height: pic.height}));\n    }\n    return '';\n  }\n\n  /**\n   * Gets the media type (LIVE/VOD)\n   * @param {Object} mediaAssetData - The media asset data.\n   * @param {string} mediaType - The asset media type.\n   * @param {string} contextType - The asset context type.\n   * @returns {Object} - The type data object.\n   * @private\n   */\n  static _getMediaType(mediaAssetData: Object, mediaType: string, contextType: string): Object {\n    let typeData = {type: MediaEntry.Type.UNKNOWN};\n    if (MediaTypeCombinations[mediaType] && MediaTypeCombinations[mediaType][contextType]) {\n      typeData = MediaTypeCombinations[mediaType][contextType](mediaAssetData);\n    }\n    return typeData;\n  }\n\n  /**\n   * Filtered the kalturaSources array by device type.\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources.\n   * @param {Array<string>} formats - Partner device formats.\n   * @returns {Array<KalturaPlaybackSource>} - Filtered kalturaSources array.\n   * @private\n   */\n  static _filterSourcesByFormats(kalturaSources: Array<KalturaPlaybackSource>, formats: Array<string>): Array<KalturaPlaybackSource> {\n    if (formats.length > 0) {\n      kalturaSources = kalturaSources.filter(source => formats.includes(source.type));\n    }\n    return kalturaSources;\n  }\n\n  /**\n   * Returns the parsed sources\n   * @function _getParsedSources\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources\n   * @param {Object} playbackContext - The playback context\n   * @return {MediaSources} - A media sources\n   * @static\n   * @private\n   */\n  static _getParsedSources(kalturaSources: Array<KalturaPlaybackSource>): MediaSources {\n    const sources = new MediaSources();\n    const addAdaptiveSource = (source: KalturaPlaybackSource) => {\n      const parsedSource = OTTProviderParser._parseAdaptiveSource(source);\n      if (parsedSource) {\n        const sourceFormat = SupportedStreamFormat.get(source.format);\n        sources.map(parsedSource, sourceFormat);\n      }\n    };\n    const parseAdaptiveSources = () => {\n      kalturaSources.filter(source => !isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    const parseProgressiveSources = () => {\n      kalturaSources.filter(source => isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    if (kalturaSources && kalturaSources.length > 0) {\n      parseAdaptiveSources();\n      parseProgressiveSources();\n    }\n    return sources;\n  }\n\n  /**\n   * Returns a parsed adaptive source\n   * @function _parseAdaptiveSource\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @returns {?MediaSource} - The parsed adaptive kalturaSource\n   * @static\n   * @private\n   */\n  static _parseAdaptiveSource(kalturaSource: ?KalturaPlaybackSource): ?MediaSource {\n    const mediaSource = new MediaSource();\n    if (kalturaSource) {\n      const playUrl = kalturaSource.url;\n      const mediaFormat = SupportedStreamFormat.get(kalturaSource.format);\n      if (mediaFormat) {\n        mediaSource.mimetype = mediaFormat.mimeType;\n      }\n      if (!playUrl) {\n        OTTProviderParser._logger.error(\n          `failed to create play url from source, discarding source: (${kalturaSource.fileId}), ${kalturaSource.format}.`\n        );\n        return null;\n      }\n      mediaSource.url = playUrl;\n      mediaSource.id = kalturaSource.fileId + ',' + kalturaSource.format;\n      if (kalturaSource.hasDrmData()) {\n        const drmParams: Array<Drm> = [];\n        kalturaSource.drm.forEach(drm => {\n          drmParams.push(new Drm(drm.licenseURL, KalturaDrmPlaybackPluginData.Scheme[drm.scheme], drm.certificate));\n        });\n        mediaSource.drmData = drmParams;\n      }\n    }\n    return mediaSource;\n  }\n\n  static hasBlockAction(response: OTTAssetLoaderResponse): boolean {\n    return response.playBackContextResult.hasBlockAction();\n  }\n\n  static getBlockAction(response: OTTAssetLoaderResponse): ?KalturaRuleAction {\n    return response.playBackContextResult.getBlockAction();\n  }\n\n  static getErrorMessages(response: OTTAssetLoaderResponse): Array<KalturaAccessControlMessage> {\n    return response.playBackContextResult.getErrorMessages();\n  }\n}\n","// @flow\nimport BaseProvider from '../common/base-provider';\nimport getLogger from '../../util/logger';\nimport OTTConfiguration from './config';\nimport OTTDataLoaderManager from './loaders/data-loader-manager';\nimport OTTSessionLoader from './loaders/session-loader';\nimport OTTAssetLoader from './loaders/asset-loader';\nimport OTTAssetListLoader from './loaders/asset-list-loader';\nimport OTTProviderParser from './provider-parser';\nimport KalturaAsset from './response-types/kaltura-asset';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport MediaEntry from '../../entities/media-entry';\nimport Error from '../../util/error/error';\n\nexport default class OTTProvider extends BaseProvider<OTTProviderMediaInfoObject> {\n  /**\n   * @constructor\n   * @param {ProviderOptionsObject} options - provider options\n   * @param {string} playerVersion - player version\n   */\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    super(options, playerVersion);\n    this._logger = getLogger('OTTProvider');\n    OTTConfiguration.set(options.env);\n    this._networkRetryConfig = Object.assign(this._networkRetryConfig, options.networkRetryParameters);\n  }\n\n  /**\n   * Gets the backend media config.\n   * @param {OTTProviderMediaInfoObject} mediaInfo - ott media info\n   * @returns {Promise<ProviderMediaConfigObject>} - The provider media config\n   */\n  getMediaConfig(mediaInfo: OTTProviderMediaInfoObject): Promise<ProviderMediaConfigObject> {\n    if (mediaInfo.ks) {\n      this.ks = mediaInfo.ks;\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OTTDataLoaderManager(this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entryId = mediaInfo.entryId;\n      if (entryId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OTTSessionLoader, {partnerId: this.partnerId});\n        }\n        const contextType = mediaInfo.contextType || KalturaPlaybackContext.Type.PLAYBACK;\n        const mediaType = mediaInfo.mediaType || KalturaAsset.Type.MEDIA;\n        const assetReferenceType = mediaInfo.assetReferenceType || KalturaAsset.AssetReferenceType.MEDIA;\n        const playbackContext: ProviderPlaybackContextOptions = {\n          mediaProtocol: mediaInfo.protocol,\n          assetFileIds: mediaInfo.fileIds,\n          context: contextType\n        };\n        if (mediaInfo.streamerType) {\n          playbackContext.streamerType = mediaInfo.streamerType;\n        }\n        if (mediaInfo.urlType) {\n          playbackContext.urlType = mediaInfo.urlType;\n        }\n        if (mediaInfo.adapterData) {\n          playbackContext.adapterData = mediaInfo.adapterData;\n        }\n        this._dataLoader.add(OTTAssetLoader, {\n          entryId: entryId,\n          ks: ks,\n          type: mediaType,\n          playbackContext: playbackContext,\n          assetReferenceType: assetReferenceType\n        });\n        const requestData = {\n          contextType: contextType,\n          mediaType: mediaType,\n          formats: mediaInfo.formats || []\n        };\n        return this._dataLoader.fetchData().then(\n          response => {\n            try {\n              resolve(this._parseDataFromResponse(response, requestData));\n            } catch (err) {\n              reject(err);\n            }\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject(new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.MISSING_MANDATORY_PARAMS, {message: 'missing entry id'}));\n      }\n    });\n  }\n\n  _parseDataFromResponse(data: Map<string, Function>, requestData: Object): ProviderMediaConfigObject {\n    this._logger.debug('Data parsing started');\n    const mediaConfig: ProviderMediaConfigObject = {\n      session: {\n        isAnonymous: this._isAnonymous,\n        partnerId: this.partnerId\n      },\n      sources: this._getDefaultSourcesObject(),\n      plugins: {}\n    };\n    if (this.uiConfId) {\n      mediaConfig.session.uiConfId = this.uiConfId;\n    }\n    if (data) {\n      if (data.has(OTTSessionLoader.id)) {\n        const sessionLoader = data.get(OTTSessionLoader.id);\n        if (sessionLoader && sessionLoader.response) {\n          mediaConfig.session.ks = sessionLoader.response;\n        }\n      } else {\n        mediaConfig.session.ks = this.ks;\n      }\n      if (data.has(OTTAssetLoader.id)) {\n        const assetLoader = data.get(OTTAssetLoader.id);\n        if (assetLoader && assetLoader.response && Object.keys(assetLoader.response).length) {\n          const response = (assetLoader: OTTAssetLoader).response;\n          if (OTTProviderParser.hasBlockAction(response)) {\n            throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.BLOCK_ACTION, {\n              action: OTTProviderParser.getBlockAction(response),\n              messages: OTTProviderParser.getErrorMessages(response)\n            });\n          }\n          const mediaEntry = OTTProviderParser.getMediaEntry(response, requestData);\n          Object.assign(mediaConfig.sources, this._getSourcesObject(mediaEntry));\n          this._verifyHasSources(mediaConfig.sources);\n          const bumper = OTTProviderParser.getBumper(response);\n          if (bumper) {\n            Object.assign(mediaConfig.plugins, {bumper});\n          }\n        }\n      }\n    }\n    this._logger.debug('Data parsing finished', mediaConfig);\n    return mediaConfig;\n  }\n\n  /**\n   * Gets playlist config from entry list.\n   * @param {ProviderEntryListObject} entryListInfo - ott entry list info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    if (entryListInfo.ks) {\n      this.ks = entryListInfo.ks;\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OTTDataLoaderManager(this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entries = entryListInfo.entries;\n      if (entries && entries.length) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OTTSessionLoader, {partnerId: this.partnerId});\n        }\n        this._dataLoader.add(OTTAssetListLoader, {entries, ks});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parseEntryListDataFromResponse(response, entries));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parseEntryListDataFromResponse(data: Map<string, Function>, requestEntries: Array<ProviderMediaInfoObject>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = {\n      id: '',\n      metadata: {\n        name: '',\n        description: ''\n      },\n      poster: '',\n      items: []\n    };\n    if (data && data.has(OTTAssetListLoader.id)) {\n      const playlistLoader = data.get(OTTAssetListLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const entryList = OTTProviderParser.getEntryList(playlistLoader.response, requestEntries);\n        entryList.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  _getDefaultSourcesObject(): ProviderMediaConfigSourcesObject {\n    return {\n      hls: [],\n      dash: [],\n      progressive: [],\n      id: '',\n      duration: 0,\n      type: MediaEntry.Type.UNKNOWN,\n      poster: '',\n      dvr: false,\n      vr: null,\n      metadata: {\n        name: '',\n        description: '',\n        tags: ''\n      }\n    };\n  }\n\n  _getSourcesObject(mediaEntry: MediaEntry) {\n    const sourcesObject: ProviderMediaConfigSourcesObject = this._getDefaultSourcesObject();\n    const mediaSources = mediaEntry.sources.toJSON();\n    sourcesObject.hls = mediaSources.hls;\n    sourcesObject.dash = mediaSources.dash;\n    sourcesObject.progressive = mediaSources.progressive;\n    sourcesObject.id = mediaEntry.id;\n    sourcesObject.duration = mediaEntry.duration;\n    sourcesObject.type = mediaEntry.type;\n    sourcesObject.dvr = !!mediaEntry.dvrStatus;\n    sourcesObject.poster = mediaEntry.poster;\n    if (\n      mediaEntry.metadata &&\n      mediaEntry.metadata.metas &&\n      typeof mediaEntry.metadata.metas.tags === 'string' &&\n      mediaEntry.metadata.metas.tags.indexOf('360') > -1\n    ) {\n      sourcesObject.vr = {};\n    }\n    Object.assign(sourcesObject.metadata, mediaEntry.metadata);\n    return sourcesObject;\n  }\n}\n","// @flow\nimport OTTProvider from './provider';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaAsset from './response-types/kaltura-asset';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__ + '-ott';\nconst VERSION = __VERSION__;\n\nconst ContextType = KalturaPlaybackContext.Type;\nconst MediaType = KalturaAsset.Type;\n\nexport {OTTProvider as Provider, ContextType, MediaType, NAME, VERSION};\n"],"sourceRoot":""}